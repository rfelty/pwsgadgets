<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="__UP_title__" 
							 description="This gadget provides you with your Personal Weather Station updated data from wunderground.com." 
							 author="Jordi Morell"
							 author_email="pwsgadgets.feedback@gmail.com" 
							 author_location="Palma de Mallorca, Spain"
							 thumbnail="http://icons.wunderground.com/graphics/logos/full_4c_gradient.jpg"
							 screenshot="http://icons.wunderground.com/graphics/logos/full_4c_gradient.jpg"
							 title_url="http://pwsgadgets.googlecode.com" 
							 directory_title="Weather underground PWS current conditions." 
							 height="50"
							 scaling="true"
							 singleton="false">
		<Require feature="dynamic-height"/>
		<Require feature="analytics"/>
	</ModulePrefs>
	<UserPref name="wnd_id" display_name="Wunderground station id" required="true"/>
	<UserPref name="wnd_units" datatype="enum" display_name="Units" default_value="metric" required="true">
		<EnumValue value="metric" display_value="Metric" />
		<EnumValue value="english" display_value="English" />
		<EnumValue value="both" display_value="Both" />
	</UserPref>
	<UserPref name="update_timer" datatype="enum" display_name="Update every: " default_value="30000" required="true">
		<EnumValue value="30000" display_value="30 seconds" />
		<EnumValue value="60000" display_value="1 minute" />
		<EnumValue value="120000" display_value="2 minutes" />
		<EnumValue value="180000" display_value="3 minutes" />
		<EnumValue value="240000" display_value="4 minutes" />
		<EnumValue value="300000" display_value="5 minutes" />
	</UserPref>
	<UserPref name="show_observationtime" display_name="Observation time:" datatype="bool" default_value="true"/>
	<UserPref name="show_temperature" display_name="Temperature:" datatype="bool" default_value="true"/>
	<UserPref name="show_dewpoint" display_name="Dew point:" datatype="bool" default_value="true"/>
	<UserPref name="show_humidity" display_name="Relative humidity:" datatype="bool" default_value="true"/>
	<UserPref name="show_wind" display_name="Wind speed:" datatype="bool" default_value="true"/>
	<UserPref name="show_windgust" display_name="Wind gust:" datatype="bool" default_value="true"/>
	<UserPref name="show_winddirection" display_name="Wind direction:" datatype="bool" default_value="true"/>
	<UserPref name="show_pressure" display_name="Pressure:" datatype="bool" default_value="true"/>
	<UserPref name="show_1hrain" display_name="1 hour rain:" datatype="bool" default_value="true"/>
	<UserPref name="show_todayrain" display_name="Today rain:" datatype="bool" default_value="true"/>
	<UserPref name="title" display_name="Title" required="true" default_value="Current conditions"/>
	<Content type="html">
		<![CDATA[
			<div id="current__MODULE_ID__" style="font-size:12pt; padding:5px; color: black;">Fetching xml...</div>
			<div id="debug___MODULE_ID__" style="font-size:9pt; padding:5px; color: red;"></div>
			<div id="version___MODULE_ID__" style="font-size:7pt; padding:5px; color: gray; text-align: right;"></div>
	
			<script type="text/javascript">
			  // version variable
				var version = "v1.1.2";
				// Main div name
				mainDiv = "current__MODULE_ID__";
				// Debug div name
				debugDiv = "debug___MODULE_ID__";
				// Version div name
				versionDiv = "version___MODULE_ID__";
				// debug flag. When its value is non-zero, debugging messages are displayed
	     	var debug = 0;
	     	// The string containing debugging messages
	     	var debug_html = "";

				// Track this gadget using Google Analytics specifiying the wunder id used.
				_IG_Analytics("UA-3007781-2", "/CurrentConditions/" + new _IG_Prefs(__MODULE_ID__).getString("wnd_id"));
	     	
				function display() {
					var prefs = new _IG_Prefs(__MODULE_ID__);
					var units = prefs.getString("wnd_units");
					var wunderID = prefs.getString("wnd_id")
					var url = "http://api.wunderground.com/weatherstation/WXCurrentObXML.asp?ID=" + wunderID + "&rnd=" + Math.random();
					// If debug enabled print info
					print(url);
					// Fetch the XML from wunderground site.
					_IG_FetchXmlContent(url, function (response) {
						if (response == null || typeof(response) != "object" || response.firstChild == null) {
							setContent("<i>Invalid data.</i>");
					  	return;
						}
						var html = ""; 
						// Display metric units.
						if (units == "metric") {
							if (prefs.getBool("show_observationtime")==true) { html += response.getElementsByTagName("observation_time")[0].firstChild.data + "<br>"; }
							if (prefs.getBool("show_temperature")==true) { html += "Temperature: " + response.getElementsByTagName("temp_c")[0].firstChild.data + " ºC<br>"; }
							if (prefs.getBool("show_dewpoint")==true) { html += "Dew point: " + response.getElementsByTagName("dewpoint_c")[0].firstChild.data + " ºC<br>"; }
							if (prefs.getBool("show_humidity")==true) { html += "Relative Humidity: " + response.getElementsByTagName("relative_humidity")[0].firstChild.data + "%<br>"; }
							if (prefs.getBool("show_wind")==true) { html += "Wind speed: " + parseInt(parseFloat(response.getElementsByTagName("wind_mph")[0].firstChild.data) * 1.61) + " km/h<br>"; }
							if (prefs.getBool("show_windgust")==true) { html += "Wind Gust: " + parseInt(parseFloat(response.getElementsByTagName("wind_gust_mph")[0].firstChild.data) * 1.61) + " km/h<br>"; }
							if (prefs.getBool("show_winddirection")==true) { html += "Wind direction: " + lookupWindString(response.getElementsByTagName("wind_degrees")[0].firstChild.data) + "<br>"; }
							if (prefs.getBool("show_pressure")==true) { html += "Pressure: " + response.getElementsByTagName("pressure_mb")[0].firstChild.data + " mb<br>"; }
							if (prefs.getBool("show_1hrain")==true) { html += "1 Hour Rain: " + response.getElementsByTagName("precip_1hr_metric")[0].firstChild.data + "mm<br>"; }
							if (prefs.getBool("show_todayrain")==true) { html += "Today Rain: " + response.getElementsByTagName("precip_today_metric")[0].firstChild.data + "mm"; }
						} else if (units == "english") {
							if (prefs.getBool("show_observationtime")==true) { html += response.getElementsByTagName("observation_time")[0].firstChild.data + "<br>"; }
							if (prefs.getBool("show_temperature")==true) { html += "Temperature: " + response.getElementsByTagName("temp_f")[0].firstChild.data + " F<br>"; }
							if (prefs.getBool("show_dewpoint")==true) { html += "Dew point: " + response.getElementsByTagName("dewpoint_f")[0].firstChild.data + " F<br>"; }
							if (prefs.getBool("show_humidity")==true) { html += "Relative Humidity: " + response.getElementsByTagName("relative_humidity")[0].firstChild.data + "%<br>"; }
							if (prefs.getBool("show_wind")==true) { html += "Wind speed: " + response.getElementsByTagName("wind_mph")[0].firstChild.data + " mph<br>"; }
							if (prefs.getBool("show_windgust")==true) { html += "Wind Gust: " + response.getElementsByTagName("wind_gust_mph")[0].firstChild.data + " mph<br>"; }
							if (prefs.getBool("show_winddirection")==true) { html += "Wind direction: " + lookupWindString(response.getElementsByTagName("wind_degrees")[0].firstChild.data) + "<br>"; }
							if (prefs.getBool("show_pressure")==true) { html += "Pressure: " + response.getElementsByTagName("pressure_in")[0].firstChild.data + " in<br>"; }
							if (prefs.getBool("show_1hrain")==true) { html += "1 Hour Rain: " + response.getElementsByTagName("precip_1hr_in")[0].firstChild.data + " in<br>"; }
							if (prefs.getBool("show_todayrain")==true) { html += "Today Rain: " + response.getElementsByTagName("precip_today_in")[0].firstChild.data + " in"; }
						} else if (units == "both") {
							if (prefs.getBool("show_observationtime")==true) { html += response.getElementsByTagName("observation_time")[0].firstChild.data + "<br>"; }
							if (prefs.getBool("show_temperature")==true) { html += "Temperature: " + response.getElementsByTagName("temp_f")[0].firstChild.data + " F (" + response.getElementsByTagName("temp_c")[0].firstChild.data + "ºC)<br>"; }
							if (prefs.getBool("show_dewpoint")==true) { html += "Dew point: " + response.getElementsByTagName("dewpoint_f")[0].firstChild.data + " F (" + response.getElementsByTagName("dewpoint_c")[0].firstChild.data + "ºC)<br>"; }
							if (prefs.getBool("show_humidity")==true) { html += "Relative Humidity: " + response.getElementsByTagName("relative_humidity")[0].firstChild.data + "%<br>"; }
							if (prefs.getBool("show_wind")==true) { html += "Wind speed: " + response.getElementsByTagName("wind_mph")[0].firstChild.data + " mph (" + parseInt(parseFloat(response.getElementsByTagName("wind_mph")[0].firstChild.data) * 1.61) + "km/h)<br>"; }
							if (prefs.getBool("show_windgust")==true) { html += "Wind Gust: " + response.getElementsByTagName("wind_gust_mph")[0].firstChild.data + " mph (" + parseInt(parseFloat(response.getElementsByTagName("wind_gust_mph")[0].firstChild.data) * 1.61) + "km/h)<br>"; }
							if (prefs.getBool("show_winddirection")==true) { html += "Wind direction: " + lookupWindString(response.getElementsByTagName("wind_degrees")[0].firstChild.data) + "<br>"; }
							if (prefs.getBool("show_pressure")==true) { html += "Pressure: " + response.getElementsByTagName("pressure_in")[0].firstChild.data + " in (" + response.getElementsByTagName("pressure_mb")[0].firstChild.data + " mb)<br>"; }
							if (prefs.getBool("show_1hrain")==true) { html += "1 Hour Rain: " + response.getElementsByTagName("precip_1hr_in")[0].firstChild.data + " in (" + response.getElementsByTagName("precip_1hr_metric")[0].firstChild.data + " mm)<br>"; }
							if (prefs.getBool("show_todayrain")==true) { html += "Today Rain: " + response.getElementsByTagName("precip_today_in")[0].firstChild.data + " in (" + response.getElementsByTagName("precip_today_metric")[0].firstChild.data + " mm)"; }
						}
						// Display HTML string
						setContent(html);
						// Displays version
						setVersion(version + "<br>Last gadget refresh: " + new Date().toLocaleString());
						// Set the timeout
						setTimeout("display()", prefs.getInt("update_timer"));
						}, { refreshInterval: 30});	
					}
	
				// Outputs content to the div and resizes the gadget
				function setContent(html) {
					_gel(mainDiv).innerHTML = html;
					_IG_AdjustIFrameHeight();
				}
	
				// Outputs debug messages if debug flag has a non-zero value
				function print(msg) {
					if (debug) {
						debug_html += msg + "<br>";
						// Write debug HTML to div
						_gel(debugDiv).innerHTML = debug_html;
						_IG_AdjustIFrameHeight();
					}
				}
				
				// Outputs the wind direction string from the degrees
				function lookupWindString(n) {
					var s="-";
					if (n > 360) n = n%360;
					if (n >= 0 && n < 11.25 ) s="N";
					else if (n >= 11.25  && n < 33.75 ) s="NNE";
					else if (n >= 33.75  && n < 56.25 ) s="NE";
					else if (n >= 67.5   && n < 78.75 ) s="ENE";
					else if (n >= 78.75  && n < 101.25) s="E";
					else if (n >= 101.25 && n < 123.75) s="ESE";
					else if (n >= 123.75 && n < 146.25) s="SE";
					else if (n >= 146.2  && n < 168.75) s="SSE";
					else if (n >= 168.75 && n < 191.25) s="S";
					else if (n >= 191.25 && n < 213.75) s="SSW";
					else if (n >= 213.75 && n < 236.25) s="SW";
					else if (n >= 236.25 && n < 258.75) s="WSW";
					else if (n >= 258.75 && n < 281.25) s="W";
					else if (n >= 281.25 && n < 303.75) s="WNW";
					else if (n >= 303.75 && n < 326.25) s="NW";
					else if (n >= 326.25 && n < 348.75) s="NNW";
					else if (n >= 348.75) s="N";
					return s;
				}

				// Outputs version
				function setVersion(version) {
						_gel(versionDiv).innerHTML = version;
						_IG_AdjustIFrameHeight();
				}

				_IG_RegisterOnloadHandler(display);  
			</script>
		]]> 
	</Content> 
</Module>