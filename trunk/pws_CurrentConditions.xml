<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="__UP_value__" 
							 description="Weather underground personal station current conditions." 
							 author="Jordi Morell" author_email="nospam.hokus04@gmail.com" 
							 title_url="http://www.wunderground.com" 
							 directory_title="Wunderground current conditions." 
							 category="weather" 
							 height="50">
		<Require feature="dynamic-height"/>
	</ModulePrefs>
	<UserPref name="wnd_id" display_name="Wunderground station id" required="true"/>
	<UserPref name="wnd_units" datatype="enum" display_name="Units" default_value="metric" required="true">
		<EnumValue value="metric" display_value="Metric" />
		<EnumValue value="english" display_value="English" />
	</UserPref>
	<UserPref name="show_observationtime" display_name="Show observation time?" datatype="bool" default_value="true"/>
	<UserPref name="show_temperature" display_name="Show temperature?" datatype="bool" default_value="true"/>
	<UserPref name="show_dewpoint" display_name="Show dew point?" datatype="bool" default_value="true"/>
	<UserPref name="show_humidity" display_name="Show relative humidity?" datatype="bool" default_value="true"/>
	<UserPref name="show_wind" display_name="Show wind speed?" datatype="bool" default_value="true"/>
	<UserPref name="show_windgust" display_name="Show wind gust?" datatype="bool" default_value="true"/>
	<UserPref name="show_winddegrees" display_name="Show wind degrees?" datatype="bool" default_value="true"/>
	<UserPref name="show_pressure" display_name="Show pressure?" datatype="bool" default_value="true"/>
	<UserPref name="show_1hrain" display_name="Show 1 hour rain?" datatype="bool" default_value="true"/>
	<UserPref name="show_todayrain" display_name="Show today rain?" datatype="bool" default_value="true"/>
	<UserPref name="value" display_name="Title" required="true"/>
	<Content type="html">
		<![CDATA[
			<div id="current__MODULE_ID__" style="font-size:12pt; padding:5px; color: black;">Reading xml...</div>
			<div id="debug_div" style="font-size:9pt; padding:5px; color: red;"></div>
	
			<script type="text/javascript">
				// debug flag. When its value is non-zero, debugging messages are displayed
	     	var debug = 0;
	     	// The string containing debugging messages
	     	var debug_html = "";
	
				function display() {
				  this.name = 'current__MODULE_ID__';
					var prefs = new _IG_Prefs(__MODULE_ID__);
					var units = prefs.getString("wnd_units");
					var url = "http://api.wunderground.com/weatherstation/WXCurrentObXML.asp?ID=" + prefs.getString("wnd_id") + "&rnd=" + Math.random();
					print(url);
					_IG_FetchXmlContent(url, function (response) {
						if (response == null || typeof(response) != "object" || response.firstChild == null) {
							setContent("<i>Invalid data.</i>");
					  	return;
						}
						var html = ""; 
						if (units == "metric") {
							if (prefs.getBool("show_observationtime")==true) { html += response.getElementsByTagName("observation_time")[0].firstChild.data + "<br>"; }
							if (prefs.getBool("show_temperature")==true) { html += "Temperature: " + response.getElementsByTagName("temp_c")[0].firstChild.data + " ºC<br>"; }
							if (prefs.getBool("show_dewpoint")==true) { html += "Dew point: " + response.getElementsByTagName("dewpoint_c")[0].firstChild.data + " ºC<br>"; }
							if (prefs.getBool("show_humidity")==true) { html += "Relative Humidity: " + response.getElementsByTagName("relative_humidity")[0].firstChild.data + "%<br>"; }
							if (prefs.getBool("show_wind")==true) { html += "Wind speed: " + (parseFloat(response.getElementsByTagName("wind_mph")[0].firstChild.data) * 1.61) + " km/h<br>"; }
							if (prefs.getBool("show_windgust")==true) { html += "Wind Gust: " + (parseFloat(response.getElementsByTagName("wind_gust_mph")[0].firstChild.data) * 1.61) + " km/h<br>"; }
							if (prefs.getBool("show_winddegrees")==true) { html += "Wind degrees: " + response.getElementsByTagName("wind_degrees")[0].firstChild.data + "º<br>"; }
							if (prefs.getBool("show_pressure")==true) { html += "Pressure: " + response.getElementsByTagName("pressure_mb")[0].firstChild.data + " mb<br>"; }
							if (prefs.getBool("show_1hrain")==true) { html += "1 Hour Rain: " + response.getElementsByTagName("precip_1hr_metric")[0].firstChild.data + "mm<br>"; }
							if (prefs.getBool("show_todayrain")==true) { html += "Today Rain: " + response.getElementsByTagName("precip_today_metric")[0].firstChild.data + "mm"; }
						} else if (units == "english") {
							if (prefs.getBool("show_observationtime")==true) { html += response.getElementsByTagName("observation_time")[0].firstChild.data + "<br>"; }
							if (prefs.getBool("show_temperature")==true) { html += "Temperature: " + response.getElementsByTagName("temp_f")[0].firstChild.data + " F<br>"; }
							if (prefs.getBool("show_dewpoint")==true) { html += "Dew point: " + response.getElementsByTagName("dewpoint_f")[0].firstChild.data + " F<br>"; }
							if (prefs.getBool("show_humidity")==true) { html += "Relative Humidity: " + response.getElementsByTagName("relative_humidity")[0].firstChild.data + "%<br>"; }
							if (prefs.getBool("show_wind")==true) { html += "Wind speed: " + response.getElementsByTagName("wind_mph")[0].firstChild.data + " mph<br>"; }
							if (prefs.getBool("show_windgust")==true) { html += "Wind Gust: " + response.getElementsByTagName("wind_gust_mph")[0].firstChild.data + " mph<br>"; }
							if (prefs.getBool("show_winddegrees")==true) { html += "Wind degrees: " + response.getElementsByTagName("wind_degrees")[0].firstChild.data + "º<br>"; }
							if (prefs.getBool("show_pressure")==true) { html += "Pressure: " + response.getElementsByTagName("pressure_in")[0].firstChild.data + " in<br>"; }
							if (prefs.getBool("show_1hrain")==true) { html += "1 Hour Rain: " + response.getElementsByTagName("precip_1hr_in")[0].firstChild.data + "in<br>"; }
							if (prefs.getBool("show_todayrain")==true) { html += "Today Rain: " + response.getElementsByTagName("precip_today_in")[0].firstChild.data + "in"; }
						}
						// Display HTML string
						setContent(html);
						}, { refreshInterval: 30});	
					}
	
				// Outputs content to the div and resizes the gadget
				function setContent(html) {
					_gel(this.name).innerHTML = html;
					_IG_AdjustIFrameHeight();
				}
	
				// Outputs debug messages if debug flag has a non-zero value
				function print(msg) {
					if (debug) {
						debug_html += msg + "<br>";
						// Write debug HTML to div
						_gel("debug_div").innerHTML = debug_html;
						_IG_AdjustIFrameHeight();
					}
				}
					
				_IG_RegisterOnloadHandler(display);  
			</script>
		]]> 
	</Content> 
</Module>