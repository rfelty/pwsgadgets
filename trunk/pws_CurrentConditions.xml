<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="__UP_title__" 
							 description="This gadget provides you with your Personal Weather Station updated data from wunderground.com." 
							 author="Jordi Morell"
							 author_email="pwsgadgets.feedback@gmail.com" 
							 author_location="Palma de Mallorca, Spain"
							 thumbnail="http://icons.wunderground.com/graphics/logos/full_4c_gradient.jpg"
							 screenshot="http://pwsgadgets.googlecode.com/svn/trunk/screenshot/2.5.1/CurrentTab.jpg"
							 title_url="http://pwsgadgets.googlecode.com" 
							 directory_title="Weather underground PWS current conditions." 
							 author_link="http://hokusgadgets.blogspot.com/"
							 height="285"
							 scaling="true"
							 singleton="false"
							 scrolling="true">
		<Require feature="analytics"/>
		<Require feature="tabs"/>
	</ModulePrefs>
	<UserPref name="wnd_id" display_name="Wunderground station id" required="true"/>
	<UserPref name="wnd_units" datatype="enum" display_name="Units" default_value="metric" required="true">
		<EnumValue value="metric" display_value="Metric" />
		<EnumValue value="english" display_value="English" />
		<EnumValue value="both" display_value="Both" />
	</UserPref>
	<UserPref name="update_timer" datatype="enum" display_name="Update every: " default_value="30000" required="true">
		<EnumValue value="30000" display_value="30 seconds" />
		<EnumValue value="60000" display_value="1 minute" />
		<EnumValue value="120000" display_value="2 minutes" />
		<EnumValue value="180000" display_value="3 minutes" />
		<EnumValue value="240000" display_value="4 minutes" />
		<EnumValue value="300000" display_value="5 minutes" />
	</UserPref>
	<UserPref name="chart_width" datatype="enum" display_name="Chart width" default_value="600" required="true">
		<EnumValue value="750" display_value="750" />
		<EnumValue value="600" display_value="600" />
		<EnumValue value="550" display_value="550" />
		<EnumValue value="350" display_value="350" />
	</UserPref>
	<UserPref name="wnd_icons" datatype="enum" display_name="Icon set: " default_value="http://icons-pe.wxug.com/i/c/a/" required="true">
		<EnumValue value="http://icons-pe.wxug.com/i/c/a/" display_value="Default" />
		<EnumValue value="http://icons-pe.wxug.com/i/c/b/" display_value="Smiley" />
		<EnumValue value="http://icons-pe.wxug.com/i/c/c/" display_value="Generic" />
		<EnumValue value="http://icons-pe.wxug.com/i/c/d/" display_value="Old School" />
		<EnumValue value="http://icons-pe.wxug.com/i/c/e/" display_value="Cartoon" />
		<EnumValue value="http://icons-pe.wxug.com/i/c/f/" display_value="Mobile" />
		<EnumValue value="http://icons-pe.wxug.com/i/c/g/" display_value="Simple" />
		<EnumValue value="http://icons-pe.wxug.com/i/c/h/" display_value="Contemporary" />
	</UserPref>
	<UserPref name="show_dewpoint" display_name="Dew point:" datatype="bool" default_value="true"/>
	<UserPref name="show_humidity" display_name="Relative humidity:" datatype="bool" default_value="true"/>
	<UserPref name="show_wind" display_name="Wind:" datatype="bool" default_value="true"/>
	<UserPref name="show_pressure" display_name="Pressure:" datatype="bool" default_value="true"/>
	<UserPref name="show_1hrain" display_name="1 hour rain:" datatype="bool" default_value="true"/>
	<UserPref name="show_todayrain" display_name="Today rain:" datatype="bool" default_value="true"/>
	<UserPref name="title" display_name="Title" required="true" default_value="Current conditions"/>
	<Content type="html">
		<![CDATA[
			<style>
				.current_value{display:inline; font-size:10pt; text-align:left; font-family:"lucida grande",verdana,sans-serif}
				.current_bold{font-size:10pt; font-weight:bold; text-align:left; font-family:"lucida grande",verdana,sans-serif}
				.current_normal{font-size:10pt; font-family:"lucida grande",verdana,sans-serif}
				.current_icon{display:inline; vertical-align:middle; height:42px; font-family:"lucida grande",verdana,sans-serif}
				.current_header{display:inline; vertical-align:middle; height:42px; font-weight:bold; padding:5px; color:black; font-family:"lucida grande",verdana,sans-serif}
				
				.extreme_value_max{display:inline; font-size:10pt; text-align:left; color:red; font-weight:bold; font-family:"lucida grande",verdana,sans-serif}
				.extreme_value_min{display:inline; font-size:10pt; text-align:left; color:blue; font-weight:bold; font-family:"lucida grande",verdana,sans-serif}
				.extreme_normal{display:inline; font-size:10pt; text-align:left; color:black; font-family:"lucida grande",verdana,sans-serif}
				.extreme_bold{display:inline; font-size:10pt; text-align:left; color:black; font-weight:bold; font-family:"lucida grande",verdana,sans-serif}
				
				.forecast_bold{display:inline; font-size:10pt; text-align:left; color:black; font-weight:bold; font-family:"lucida grande",verdana,sans-serif}
				.forecast_blue{display:inline; font-size:10pt; text-align:left; color:blue; font-weight:bold; font-family:"lucida grande",verdana,sans-serif}
				.forecast_red{display:inline; font-size:10pt; text-align:left; color:red; font-weight:bold; font-family:"lucida grande",verdana,sans-serif}
				
				
				.tempChart_flash{text-align:center}
				.tempChart_normal{display:inline; font-size:10pt; text-align:left; color:black; font-family:"lucida grande",verdana,sans-serif}

				.windChart_flash{text-align:center}
				.windChart_normal{display:inline; font-size:10pt; text-align:left; color:black; font-family:"lucida grande",verdana,sans-serif}
				
				.astronomy_value{display:inline; font-size:10pt; text-align:left; font-family:"lucida grande",verdana,sans-serif}
				.astronomy_bold{font-size:10pt; font-weight:bold; text-align:left; font-family:"lucida grande",verdana,sans-serif}
				.astronomy_icon{display:inline; vertical-align:middle; height:42px; font-family:"lucida grande",verdana,sans-serif}
				.astronomy_header{display:inline; vertical-align:middle; height:42px; font-weight:bold; padding:5px; color:black; font-family:"lucida grande",verdana,sans-serif}				
				
				.hints_normal{font-size:9pt; padding:5px; color:gray; text-align:left; font-family:"lucida grande",verdana,sans-serif}
				
				.about_normal{font-size:10pt; padding:5px; color:gray; text-align:left; font-family:"lucida grande",verdana,sans-serif}
				
				.footer{font-size:7pt; padding:5px; color:gray; text-align:right; font-family:"lucida grande",verdana,sans-serif}
			</style>
			<script type="text/javascript" src="http://pwsgadgets.googlecode.com/svn/trunk/js/swfobject.js"></script>
			<div id="current">
				<div id="current_error" class="current_normal"></div>
				<center>
					<p>
						<div id="current_Icon" class="current_icon"></div><div id="current_Neighborhood" class="current_header"></div><div id="current_Temperature_F" class="current_header"></div><div id="current_Temperature_Separator" class="current_header"></div><div id="current_Temperature_C" class="current_header"></div>
					</p>
					<div id="current_LatestUpload" class="current_normal"></div>
					<table>
						<tr id="current_DewPoint_Row">
							<td><div id="current_DewPoint_txt" class="current_bold">Dew Point</div></td>
							<td><div id="current_DewPoint_F" class="current_value"></div><div id="current_DewPoint_Separator" class="current_value"></div><div id="current_DewPoint_C" class="current_value"></div></td>
						</tr>
						<tr id="current_Humidity_Row">
							<td><div id="current_Humidity_txt" class="current_bold">Humidity</div></td>
							<td><div id="current_Humidity" class="current_value"></div></td>
						</tr>
						<tr id="current_Wind_Row">
							<td><div id="current_Wind_txt" class="current_bold">Wind</div></td>
							<td><div id="current_Wind_Direction" class="current_value"></div><div id="current_Wind_Mph" class="current_value"></div><div id="current_Wind_Separator" class="current_value"></div><div id="current_Wind_Kmh" class="current_value"></div><div id="current_Wind_Text" class="current_value"></div><div id="current_Wind_Mph_Gust" class="current_value"></div><div id="current_Wind_Gust_Separator" class="current_value"></div><div id="current_Wind_Kmh_Gust" class="current_value"></div></td>
						</tr>
						<tr id="current_Pressure_Row">
							<td><div id="current_Pressure_txt" class="current_bold">Pressure</div></td>
							<td><div id="current_Pressure_In" class="current_value"></div><div id="current_Pressure_Separator" class="current_value"></div><div id="current_Pressure_Mb" class="current_value"></div></td>
						</tr>
						<tr id="current_1HourRain_Row">
							<td><div id="current_1HourRain_txt" class="current_bold">1 Hour Rain</div></td>
							<td><div id="current_1HourRain_In" class="current_value"></div><div id="current_1HourRain_Separator" class="current_value"></div><div id="current_1HourRain_Mm" class="current_value"></div></td>
						</tr>
						<tr id="current_TodayRain_Row">
							<td><div id="current_TodayRain_txt" class="current_bold">Today Rain</div></td>
							<td><div id="current_TodayRain_In" class="current_value"></div><div id="current_TodayRain_Separator" class="current_value"></div><div id="current_TodayRain_Mm" class="current_value"></div></td>
						</tr>
					</table>
					<div id="current_LastUpdated" class="current_normal"></div>
				</center>
			</div>
			<div id="extreme">
				<center>
					<table width="90%">
						<tr>
							<td width="24%">&nbsp;</td>
							<td width="38%"><div class="extreme_value_max">Max</div></td>
							<td width="38%"><div class="extreme_value_min">Min</div></td>
						</tr>
						<tr>
							<td width="24%"><div id="extreme_Temp" class="extreme_bold">Temperature</div></td>
							<td width="38%"><div id="extreme_Temp_Max_F" class="extreme_value_max"></div><div id="extreme_Temp_Max_Separator" class="extreme_value_max"></div><div id="extreme_Temp_Max_C" class="extreme_value_max"></div><div id="extreme_Temp_MaxTime" class="extreme_normal"></div></td>
							<td width="38%"><div id="extreme_Temp_Min_F" class="extreme_value_min"></div><div id="extreme_Temp_Min_Separator" class="extreme_value_min"></div><div id="extreme_Temp_Min_C" class="extreme_value_min"></div><div id="extreme_Temp_MinTime" class="extreme_normal"</div></td>
						</tr>
						<tr id="extreme_Dewpoint_Row">
							<td width="24%"><div id="extreme_DewPoint" class="extreme_bold">Dew Point</div></td>
							<td width="38%"><div id="extreme_DewPoint_Max_F" class="extreme_value_max"></div><div id="extreme_DewPoint_Max_Separator" class="extreme_value_max"></div><div id="extreme_DewPoint_Max_C" class="extreme_value_max"></div><div id="extreme_DewPoint_MaxTime" class="extreme_normal"></div></td>
							<td width="38%"><div id="extreme_DewPoint_Min_F" class="extreme_value_min"></div><div id="extreme_DewPoint_Min_Separator" class="extreme_value_min"></div><div id="extreme_DewPoint_Min_C" class="extreme_value_min"></div><div id="extreme_DewPoint_MinTime" class="extreme_normal"></div></td>
						</tr>
						<tr id="extreme_Humidity_Row">
							<td width="24%"><div id="extreme_Humidity" class="extreme_bold">Humidity</div></td>
							<td width="38%"><div id="extreme_Humidity_Max" class="extreme_value_max"></div><div id="extreme_Humidity_MaxTime" class="extreme_normal"></div></td>
							<td width="38%"><div id="extreme_Humidity_Min" class="extreme_value_min"></div><div id="extreme_Humidity_MinTime" class="extreme_normal"></div></td>
						</tr>
						<tr id="extreme_Wind_Row">
							<td width="24%"><div id="extreme_Wind" class="extreme_bold">Wind</div></td>
							<td width="76%" colspan="2"><div id="extreme_Wind_Direction" class="extreme_value_max"></div><div id="extreme_Wind_Max_Mph" class="extreme_value_max"></div><div id="extreme_Wind_Separator" class="extreme_value_max"></div><div id="extreme_Wind_Max_Kmh" class="extreme_value_max"></div><div id="extreme_Wind_MaxTime" class="extreme_normal"></div></td>
						</tr>
						<tr id="extreme_Pressure_Row">
							<td width="24%"><div id="extreme_Pressure" class="extreme_bold">Pressure</div></td>
							<td width="38%"><div id="extreme_Pressure_Max_In" class="extreme_value_max"></div><div id="extreme_Pressure_Max_Separator" class="extreme_value_max"></div><div id="extreme_Pressure_Max_Mb" class="extreme_value_max"></div><div id="extreme_Pressure_MaxTime" class="extreme_normal"></div></td>
							<td width="38%"><div id="extreme_Pressure_Min_In" class="extreme_value_min"></div><div id="extreme_Pressure_Min_Separator" class="extreme_value_min"></div><div id="extreme_Pressure_Min_Mb" class="extreme_value_min"></div><div id="extreme_Pressure_MinTime" class="extreme_normal"></div></td>
						</tr>
					</table>
					<div id="extreme_LastUpdated" class="extreme_normal"></div>
				</center>
			</div>
			<div id="tempChart">
				<div id="tempChart_flash" class="tempChart_flash"></div>
				<div id="tempChart_LastUpdated" class="tempChart_normal"></div>
			</div>
			<div id="windChart">
				<div id="windChart_flash" class="windChart_flash"></div>
				<div id="windChart_LastUpdated" class="windChart_normal"></div>
			</div>
			<div id="forecast">
				<br>
				<table width="100%">
					<tr>
						<td align="center" width="20%"><div id="forecast_Period0" class="forecast_bold"></div></td>
						<td align="center" width="20%"><div id="forecast_Period1" class="forecast_bold"></div></td>
						<td align="center" width="20%"><div id="forecast_Period2" class="forecast_bold"></div></td>
						<td align="center" width="20%"><div id="forecast_Period3" class="forecast_bold"></div></td>
						<td align="center" width="20%"><div id="forecast_Period4" class="forecast_bold"></div></td>
					</tr>
					<tr>
						<td align="center" width="20%"><div id="forecast_Period0_Icon"></div></td>
						<td align="center" width="20%"><div id="forecast_Period1_Icon"></div></td>
						<td align="center" width="20%"><div id="forecast_Period2_Icon"></div></td>
						<td align="center" width="20%"><div id="forecast_Period3_Icon"></div></td>
						<td align="center" width="20%"><div id="forecast_Period4_Icon"></div></td>
					</tr>
					<tr>
						<td align="center" width="20%"><div id="forecast_Period0_Max" class="forecast_red"></div><div id="forecast_Period0_Separator" class="forecast_bold">|</div><div id="forecast_Period0_Min" class="forecast_blue"></div></td>
						<td align="center" width="20%"><div id="forecast_Period1_Max" class="forecast_red"></div><div id="forecast_Period1_Separator" class="forecast_bold">|</div><div id="forecast_Period1_Min" class="forecast_blue"></div></td>
						<td align="center" width="20%"><div id="forecast_Period2_Max" class="forecast_red"></div><div id="forecast_Period2_Separator" class="forecast_bold">|</div><div id="forecast_Period2_Min" class="forecast_blue"></div></td>
						<td align="center" width="20%"><div id="forecast_Period3_Max" class="forecast_red"></div><div id="forecast_Period3_Separator" class="forecast_bold">|</div><div id="forecast_Period3_Min" class="forecast_blue"></div></td>
						<td align="center" width="20%"><div id="forecast_Period4_Max" class="forecast_red"></div><div id="forecast_Period4_Separator" class="forecast_bold">|</div><div id="forecast_Period4_Min" class="forecast_blue"></div></td>
					</tr>
				</table>
				<div id="forecast_LastUpdated" class="forecast_normal"></div>
			</div>
			<div id="astronomy">
				<center>
					<p>
						<div id="astronomy_Icon" class="astronomy_icon"></div><div id="astronomy_Percent" class="astronomy_header"></div>
					</p>
					<table>
						<tr>
							<td><div id="astronomy_Sunrise_txt" class="astronomy_bold">Sunrise</div></td>
							<td><div id="astronomy_Sunrise" class="astronomy_value"></div></td>
						</tr>
						<tr>
							<td><div id="astronomy_Sunset_txt" class="astronomy_bold">Sunset</div></td>
							<td><div id="astronomy_Sunset" class="astronomy_value"></div></td>
						</tr>
						<tr>
							<td><div id="astronomy_LightTime_txt" class="astronomy_bold">Length Of Visible Light</div></td>
							<td><div id="astronomy_LightTime" class="astronomy_value"></div></td>
						</tr>
					</table>
				</center>
			</div>
			<div id="hints" class="hints_normal"></div>
			<div id="about" class="about_normal"></div>
			<div id="footer" class="footer"></div>
			<script type="text/javascript">
			  // version variable
				var version = "v2.6.1";
				// Current conditions tab id
				var currentTabId = "current";
				// Extreme values tab id
				var extremeTabId = "extreme";
				// Temperature chart tab id
				var tempChartTabId = "tempChart";
				// Wind chart tab id
				var windChartTabId = "windChart";
				// Forecast tab id
				var forecastTabId = "forecast";				
				// astronomy tab id
				var astronomyTabId = "astronomy";
				// Hints tab id
				var hintsTabId = "hints";
				// About tab id
				var aboutTabId = "about";
				// Footer id.
				var footerId = "footer";
				// Initialize tabs.
				var tabs = new _IG_Tabs(__MODULE_ID__, "Current");
				// Track this gadget using Google Analytics specifiying the wunder id used.
				_IG_Analytics("UA-3007781-2", "/CurrentConditions/" + new _IG_Prefs(__MODULE_ID__).getString("wnd_id"));
			
				// Init function.
				function init() {
					// Add the gadget tabs.
					tabs.addTab("Current", currentTabId);
					tabs.addTab("Extreme", extremeTabId);
					tabs.addTab("Temp Chart", tempChartTabId);
					tabs.addTab("Wind Chart", windChartTabId);
					tabs.addTab("Forecast", forecastTabId);
					tabs.addTab("Astronomy", astronomyTabId);
					tabs.addTab("Hints", hintsTabId);
					tabs.addTab("About", aboutTabId, displayAboutTab);
					_IG_FetchXmlContent(getCurrentConditionsUrl(), processCurrentConditionsResponse);
					_IG_FetchXmlContent(getDailyObservationsUrl(), processDailyObservationsResponse);
				}
				
				function processCurrentConditionsResponse(xml) {
					displayCurrentConditionsHtml(xml);
					displayHintsHtml(xml);
					displayFooterHtml(xml);
					// updateExtremeHtml(xml);
					// Set the timeout
					setTimeout("_IG_FetchXmlContent(getCurrentConditionsUrl(), processCurrentConditionsResponse)", new _IG_Prefs(__MODULE_ID__).getInt("update_timer"));
				}
				
				function processDailyObservationsResponse(xml) {
					displayExtremeHtml(xml);
					displayTemperatureChart(xml);
					displayWindChart(xml);
					// Set the timeout to 5 minutes
					setTimeout("_IG_FetchXmlContent(getDailyObservationsUrl(), processDailyObservationsResponse)", 300000);
				}
				
				function processForecastResponse(xml) {
					displayCurrentIconHtml(xml);
					displayForecastHtml(xml);
					displayAstronomy(xml);
				}
				
				function displayFooterHtml(xml) {
					var units = new _IG_Prefs(__MODULE_ID__).getString("wnd_units");
					if (xml.getElementsByTagName("station_id")[0].firstChild != null) {
						if (units == "metric") {
							_gel(footerId).innerHTML = xml.getElementsByTagName("temp_c")[0].firstChild.data + " ºC " + version;
						} else if (units == "english") {
							_gel(footerId).innerHTML = xml.getElementsByTagName("temp_f")[0].firstChild.data + " F " + version;
						} else if (units == "both") {
							_gel(footerId).innerHTML = xml.getElementsByTagName("temp_f")[0].firstChild.data + " F / " + xml.getElementsByTagName("temp_c")[0].firstChild.data + " ºC " + version;
						}
					} else {
							_gel(footerId).innerHTML = version;
					}
				}
				
				// Create 'Current' tab html.
				function displayCurrentConditionsHtml(xml) {
					if (xml == null || typeof(xml) != "object" || xml.firstChild == null) {
						_gel(currentTabId).innerHTML = "<i>Invalid data.</i>";
					  return;
					}
					var prefs = new _IG_Prefs(__MODULE_ID__);
					var units = prefs.getString("wnd_units");
					var latestUpload = null;
					// Display metric units.
					if (xml.getElementsByTagName("station_id")[0].firstChild == null) {
						_gel("current_error").innerHTML = "<b>Invalid wunderground station id.</b><br>Please visit <a href='http://www.wunderground.com/weatherstation/index.asp' target='_blank'>Personal Weather Stations Weather Underground</a> site to get more info."
					} else {
						latestUpload = new Date();
						latestUpload.setTime(Date.parse(xml.getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						var latitude = xml.getElementsByTagName("latitude")[0].firstChild.data;
						var longitude = xml.getElementsByTagName("longitude")[0].firstChild.data;
						_IG_FetchXmlContent(getForecastURL(latitude, longitude), processForecastResponse);
						if (xml.getElementsByTagName("neighborhood")[0].firstChild != null) {	_gel("current_Neighborhood").innerHTML = xml.getElementsByTagName("neighborhood")[0].firstChild.data; }
						_gel("current_Temperature_F").innerHTML = xml.getElementsByTagName("temp_f")[0].firstChild.data + " F";
						_gel("current_Temperature_Separator").innerHTML = "/";
						_gel("current_Temperature_C").innerHTML = xml.getElementsByTagName("temp_c")[0].firstChild.data + " ºC";
						if (xml.getElementsByTagName("dewpoint_f")[0].firstChild != null) {
							_gel("current_DewPoint_F").innerHTML = xml.getElementsByTagName("dewpoint_f")[0].firstChild.data + " F ";
							_gel("current_DewPoint_Separator").innerHTML = "/ ";
							_gel("current_DewPoint_C").innerHTML = toCelsius(parseFloat(xml.getElementsByTagName("dewpoint_f")[0].firstChild.data)) + " ºC";
						}
						if (xml.getElementsByTagName("relative_humidity")[0].firstChild != null) {
							_gel("current_Humidity").innerHTML = xml.getElementsByTagName("relative_humidity")[0].firstChild.data + "%";
						}
						if (xml.getElementsByTagName("wind_degrees")[0].firstChild != null && xml.getElementsByTagName("wind_mph")[0].firstChild != null && xml.getElementsByTagName("wind_gust_mph")[0].firstChild != null) {
							_gel("current_Wind_Direction").innerHTML = lookupWindString(xml.getElementsByTagName("wind_degrees")[0].firstChild.data) + " at ";
							_gel("current_Wind_Mph").innerHTML = xml.getElementsByTagName("wind_mph")[0].firstChild.data + " mph ";
							_gel("current_Wind_Separator").innerHTML = "/ ";
							_gel("current_Wind_Kmh").innerHTML = toKmh(parseFloat(xml.getElementsByTagName("wind_mph")[0].firstChild.data)) + " km/h ";
							_gel("current_Wind_Text").innerHTML = "gusting to ";
							_gel("current_Wind_Mph_Gust").innerHTML = xml.getElementsByTagName("wind_gust_mph")[0].firstChild.data + " mph ";
							_gel("current_Wind_Gust_Separator").innerHTML = "/ ";
							_gel("current_Wind_Kmh_Gust").innerHTML = toKmh(parseFloat(xml.getElementsByTagName("wind_gust_mph")[0].firstChild.data)) + " km/h";
						}
						if (xml.getElementsByTagName("pressure_in")[0].firstChild != null) {
							_gel("current_Pressure_In").innerHTML = xml.getElementsByTagName("pressure_in")[0].firstChild.data + " in ";
							_gel("current_Pressure_Separator").innerHTML = "/ ";
							_gel("current_Pressure_Mb").innerHTML = toMb(parseFloat(xml.getElementsByTagName("pressure_in")[0].firstChild.data)) + " mb";
						}
						if (xml.getElementsByTagName("precip_1hr_in")[0].firstChild != null) {
								_gel("current_1HourRain_In").innerHTML = xml.getElementsByTagName("precip_1hr_in")[0].firstChild.data + " in ";
								_gel("current_1HourRain_Separator").innerHTML = "/ ";
								_gel("current_1HourRain_Mm").innerHTML = toMm(parseFloat(xml.getElementsByTagName("precip_1hr_in")[0].firstChild.data)) + " mm";
						}
						if (xml.getElementsByTagName("precip_today_in")[0].firstChild != null) {
								_gel("current_TodayRain_In").innerHTML = xml.getElementsByTagName("precip_today_in")[0].firstChild.data + " in ";
								_gel("current_TodayRain_Separator").innerHTML = "/ ";
								_gel("current_TodayRain_Mm").innerHTML = toMm(parseFloat(xml.getElementsByTagName("precip_today_in")[0].firstChild.data)) + " mm";
						}
						// Set data visibility
						if (!prefs.getBool("show_dewpoint")) {
							_gel("current_DewPoint_Row").style.display = "none";
						}
						if (!prefs.getBool("show_humidity")) {
							_gel("current_Humidity_Row").style.display = "none";
						}
						if (!prefs.getBool("show_wind")) {
							_gel("current_Wind_Row").style.display = "none";
						}
						if (!prefs.getBool("show_pressure")) {
							_gel("current_Pressure_Row").style.display = "none";
						}
						if (!prefs.getBool("show_1hrain")) {
							_gel("current_1HourRain_Row").style.display = "none";
						}
						if (!prefs.getBool("show_todayrain")) {
							_gel("current_TodayRain_Row").style.display = "none";
						}
						// Set metric only data visibility
						if (units == "metric") {
							_gel("current_Temperature_F").style.display = "none";
							_gel("current_Temperature_Separator").style.display = "none";

							_gel("current_DewPoint_F").style.display = "none";
							_gel("current_DewPoint_Separator").style.display = "none";

							_gel("current_Wind_Mph").style.display = "none";
							_gel("current_Wind_Separator").style.display = "none";
							_gel("current_Wind_Mph_Gust").style.display = "none";
							_gel("current_Wind_Gust_Separator").style.display = "none";

							_gel("current_Pressure_In").style.display = "none";
							_gel("current_Pressure_Separator").style.display = "none";

							_gel("current_1HourRain_In").style.display = "none";
							_gel("current_1HourRain_Separator").style.display = "none";

							_gel("current_TodayRain_In").style.display = "none";
							_gel("current_TodayRain_Separator").style.display = "none";
						} else if (units == "english") {
							// Set english only data visibility
							_gel("current_Temperature_C").style.display = "none";
							_gel("current_Temperature_Separator").style.display = "none";

							_gel("current_DewPoint_C").style.display = "none";
							_gel("current_DewPoint_Separator").style.display = "none";

							_gel("current_Wind_Kmh").style.display = "none";
							_gel("current_Wind_Separator").style.display = "none";
							_gel("current_Wind_Kmh_Gust").style.display = "none";
							_gel("current_Wind_Gust_Separator").style.display = "none";

							_gel("current_Pressure_Mb").style.display = "none";
							_gel("current_Pressure_Separator").style.display = "none";

							_gel("current_1HourRain_Mm").style.display = "none";
							_gel("current_1HourRain_Separator").style.display = "none";

							_gel("current_TodayRain_Mm").style.display = "none";
							_gel("current_TodayRain_Separator").style.display = "none";
						}
						if (latestUpload != null) { _gel("current_LatestUpload").innerHTML = "Conditions as of " + latestUpload.toLocaleString(); }
						_gel("current_LastUpdated").innerHTML = "Last updated at " + getTimeLongString(new Date());
					}
					// Display the footer
					displayFooterHtml(xml);
				}

				// Gets the current conditions icon url.
				function displayCurrentIconHtml(xml) {
					if (xml == null || typeof(xml) != "object" || xml.firstChild == null) {
					  return;
					}
					var imgHtml = "";
					var sunriseHour = xml.getElementsByTagName("sunrise")[0].getElementsByTagName("hour")[0].firstChild.data;
					var sunriseMinutes = xml.getElementsByTagName("sunrise")[0].getElementsByTagName("minute")[0].firstChild.data;
					var sunsetHour = xml.getElementsByTagName("sunset")[0].getElementsByTagName("hour")[0].firstChild.data;
					var sunsetMinutes = xml.getElementsByTagName("sunset")[0].getElementsByTagName("minute")[0].firstChild.data;
					var sunrise = new Date();
					sunrise.setHours(sunriseHour);
					sunrise.setMinutes(sunriseMinutes);
					var sunset = new Date();
					sunset.setHours(sunsetHour);
					sunset.setMinutes(sunsetMinutes);
					var now = new Date();
					if (xml.getElementsByTagName("icon")[0].firstChild != null) {
						imgHtml += "<img src='" + new _IG_Prefs(__MODULE_ID__).getString("wnd_icons");
						var icon = xml.getElementsByTagName("icon")[0].firstChild.data;
						if (((sunrise.getTime() - now.getTime()) < 0) && ((sunset.getTime() - now.getTime()) > 0)) {
							imgHtml += icon;
						} else {
							if (icon.indexOf("nt_")!= -1) {
								imgHtml += icon;
							} else {
								imgHtml += "nt_" + icon;
							}
						}
						imgHtml += ".gif' height='42' width='42'>";
					}
					// Display icon
					_gel("current_Icon").innerHTML = imgHtml;
				}

				// Create 'Extreme' tab html.
				function displayExtremeHtml(xml) {
					if (xml == null || typeof(xml) != "object" || xml.firstChild == null) {
						_gel(extremeTabId).innerHTML = "<i>Invalid data.</i>";
					  return;
					}
					var prefs = new _IG_Prefs(__MODULE_ID__);
					var units = prefs.getString("wnd_units");
					var maxTempF = -10000;
					var minTempF = 10000;
					var maxTempTime = new Date();
					var minTempTime = new Date();
					var maxDewPointF = -10000;
					var minDewPointF = 10000;
					var maxDewPointTime = new Date();
					var minDewPointTime = new Date();
					var maxHumidity = -10000;
					var minHumidity = 10000;
					var maxHumidityTime = new Date();
					var minHumidityTime = new Date();
					var maxPressureIn = -10000;
					var minPressureIn = 10000;
					var maxPressureTime = new Date();
					var minPressureTime = new Date();
					var maxWindMph = -10000;
					var maxWindTime = new Date();
					var maxWindDirection = -1;
					var currentTemp = 0;
					var currentDewPoint = 0;
					var currentHumidity = 0;
					var currentPressure = 0;
					var currentWind = 0;
					var currentWindDirection = 0;
					var observationList = xml.getElementsByTagName("current_observation");
					for (var i = 0; i < observationList.length ; i++) { 
						currentTemp = parseFloat(observationList[i].getElementsByTagName("temp_f")[0].firstChild.data);
						currentDewPoint = parseFloat(observationList[i].getElementsByTagName("dewpoint_f")[0].firstChild.data);
						currentHumidity = parseFloat(observationList[i].getElementsByTagName("relative_humidity")[0].firstChild.data);
						currentPressure = parseFloat(observationList[i].getElementsByTagName("pressure_in")[0].firstChild.data);
						currentWind = parseFloat(observationList[i].getElementsByTagName("wind_gust_mph")[0].firstChild.data);
						currentWindDirection = parseInt(observationList[i].getElementsByTagName("wind_degrees")[0].firstChild.data);
						if (currentTemp > maxTempF) {                    
							maxTempF = currentTemp;
							maxTempTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}                      
						if (currentTemp < minTempF) {  
							minTempF = currentTemp;
							minTempTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}
						if (currentDewPoint > maxDewPointF) {                    
							maxDewPointF = currentDewPoint;
							maxDewPointTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}                      
						if (currentDewPoint < minDewPointF) {  
							minDewPointF = currentDewPoint;
							minDewPointTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}
						if (currentHumidity > maxHumidity) {                    
							maxHumidity = currentHumidity;
							maxHumidityTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}                      
						if (currentHumidity < minHumidity) {  
							minHumidity = currentHumidity;
							minHumidityTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}
						if (currentPressure > maxPressureIn) {                    
							maxPressureIn = currentPressure;
							maxPressureTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}                      
						if (currentPressure < minPressureIn) {  
							minPressureIn = currentPressure;
							minPressureTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}
						if (currentWind > maxWindMph) {                    
							maxWindMph = currentWind;
							maxWindTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
							maxWindDirection = currentWindDirection;
						}                      
					}
					_gel("extreme_Temp_Max_F").innerHTML = maxTempF + " F ";
					_gel("extreme_Temp_Min_F").innerHTML =  minTempF + " F ";
					_gel("extreme_Temp_Max_Separator").innerHTML = "/ ";
					_gel("extreme_Temp_Min_Separator").innerHTML =  "/ ";
					_gel("extreme_Temp_Max_C").innerHTML = toCelsius(parseFloat(maxTempF)) + " ºC ";
					_gel("extreme_Temp_Min_C").innerHTML =  toCelsius(parseFloat(minTempF)) + " ºC ";
					_gel("extreme_Temp_MaxTime").innerHTML = "at " + getTimeString(maxTempTime);
					_gel("extreme_Temp_MinTime").innerHTML = "at " + getTimeString(minTempTime);

					_gel("extreme_DewPoint_Max_F").innerHTML = maxDewPointF+ " F ";
					_gel("extreme_DewPoint_Min_F").innerHTML = minDewPointF + " F "					
					_gel("extreme_DewPoint_Max_Separator").innerHTML = "/ ";
					_gel("extreme_DewPoint_Min_Separator").innerHTML =  "/ ";
					_gel("extreme_DewPoint_Max_C").innerHTML = toCelsius(parseFloat(maxDewPointF)) + " ºC ";
					_gel("extreme_DewPoint_Min_C").innerHTML = toCelsius(parseFloat(minDewPointF)) + " ºC "
					_gel("extreme_DewPoint_MaxTime").innerHTML = "at " + getTimeString(maxDewPointTime);
					_gel("extreme_DewPoint_MinTime").innerHTML = "at " + getTimeString(minDewPointTime);

					_gel("extreme_Humidity_Max").innerHTML = maxHumidity + "% ";
					_gel("extreme_Humidity_MaxTime").innerHTML = "at " + getTimeString(maxHumidityTime);
					_gel("extreme_Humidity_Min").innerHTML = minHumidity + "% ";
					_gel("extreme_Humidity_MinTime").innerHTML = "at " + getTimeString(minHumidityTime);

					_gel("extreme_Wind_Direction").innerHTML = lookupWindString(maxWindDirection) + " at ";
					_gel("extreme_Wind_Max_Mph").innerHTML = maxWindMph + " mph ";
					_gel("extreme_Wind_Max_Kmh").innerHTML = toKmh(parseFloat(maxWindMph)) + " km/h ";
					_gel("extreme_Wind_Separator").innerHTML = "/ ";
					_gel("extreme_Wind_MaxTime").innerHTML = "at " + getTimeString(maxWindTime);

					_gel("extreme_Pressure_Max_In").innerHTML = maxPressureIn + " in ";
					_gel("extreme_Pressure_Min_In").innerHTML = minPressureIn + " in ";
					_gel("extreme_Pressure_Max_Mb").innerHTML = toMb(parseFloat(maxPressureIn)) + " mb ";
					_gel("extreme_Pressure_Min_Mb").innerHTML = toMb(parseFloat(minPressureIn)) + " mb ";
					_gel("extreme_Pressure_Max_Separator").innerHTML = "/ ";
					_gel("extreme_Pressure_Min_Separator").innerHTML =  "/ ";
					_gel("extreme_Pressure_MaxTime").innerHTML = "at " + getTimeString(maxPressureTime);
					_gel("extreme_Pressure_MinTime").innerHTML = "at " + getTimeString(minPressureTime);

					// Set data visibility
						// Set data visibility
						if (!prefs.getBool("show_dewpoint")) {
							_gel("extreme_DewPoint_Row").style.display = "none";
						}
						if (!prefs.getBool("show_humidity")) {
							_gel("extreme_Humidity_Row").style.display = "none";
						}
						if (!prefs.getBool("show_wind")) {
							_gel("extreme_Wind_Row").style.display = "none";
						}
						if (!prefs.getBool("show_pressure")) {
							_gel("extreme_Pressure_Row").style.display = "none";
						}
						// Set metric only data visibility
						if (units == "metric") {
							_gel("extreme_Temp_Max_F").style.display = "none";
							_gel("extreme_Temp_Max_Separator").style.display = "none";
							_gel("extreme_Temp_Min_F").style.display = "none";
							_gel("extreme_Temp_Min_Separator").style.display = "none";

							_gel("extreme_DewPoint_Max_F").style.display = "none";
							_gel("extreme_DewPoint_Max_Separator").style.display = "none";
							_gel("extreme_DewPoint_Min_F").style.display = "none";
							_gel("extreme_DewPoint_Min_Separator").style.display = "none";

							_gel("extreme_Wind_Max_Mph").style.display = "none";
							_gel("extreme_Wind_Separator").style.display = "none";

							_gel("extreme_Pressure_Max_In").style.display = "none";
							_gel("extreme_Pressure_Max_Separator").style.display = "none";
							_gel("extreme_Pressure_Min_In").style.display = "none";
							_gel("extreme_Pressure_Min_Separator").style.display = "none";
						} else if (units == "english") {
							// Set english only data visibility
							_gel("extreme_Temp_Max_C").style.display = "none";
							_gel("extreme_Temp_Max_Separator").style.display = "none";
							_gel("extreme_Temp_Min_C").style.display = "none";
							_gel("extreme_Temp_Min_Separator").style.display = "none";

							_gel("extreme_DewPoint_Max_C").style.display = "none";
							_gel("extreme_DewPoint_Max_Separator").style.display = "none";
							_gel("extreme_DewPoint_Min_C").style.display = "none";
							_gel("extreme_DewPoint_Min_Separator").style.display = "none";

							_gel("extreme_Wind_Max_Kmh").style.display = "none";
							_gel("extreme_Wind_Separator").style.display = "none";

							_gel("extreme_Pressure_Max_Mb").style.display = "none";
							_gel("extreme_Pressure_Max_Separator").style.display = "none";
							_gel("extreme_Pressure_Min_Mb").style.display = "none";
							_gel("extreme_Pressure_Min_Separator").style.display = "none";
						}
					_gel("extreme_LastUpdated").innerHTML = "Last updated at " + getTimeLongString(new Date());
				}
				
				// Create the temperature chart.
				function displayTemperatureChart(xml) {
					if (xml == null || typeof(xml) != "object" || xml.firstChild == null) {
					  return;
					}
					var prefs = new _IG_Prefs(__MODULE_ID__);
					var units = prefs.getString("wnd_units");
					var maxTemp = -10000; 
					var minTemp = 10000;     
					var maxDew = -10000; 
					var minDew = 10000;     
					var temp = 0;
					var dew = 0;
					var humidity = 0;
					var observationList = xml.getElementsByTagName("current_observation");					
					var tempArray = new Array(1440);
					var dewArray = new Array(1440);
					var humidityArray = new Array(1440);
					// Init temp and dew poit arrays.
					for (var i = 0; i < 1440; i++) {
						tempArray[i] = "null";
						dewArray[i] = "null";
						humidityArray[i] = "null";
					}
					var obsTime = new Date();
					for (var i = 0; i < observationList.length ; i++) { 
						temp = parseFloat(observationList[i].getElementsByTagName("temp_f")[0].firstChild.data);
						dew = parseFloat(observationList[i].getElementsByTagName("dewpoint_f")[0].firstChild.data);
						humidity = parseInt(observationList[i].getElementsByTagName("relative_humidity")[0].firstChild.data);
						obsTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						if (units == "metric") {
							tempArray[getIndex(obsTime)] = toCelsius(temp);
							dewArray[getIndex(obsTime)] = toCelsius(dew);
						} else {
							tempArray[getIndex(obsTime)] = temp;
							dewArray[getIndex(obsTime)] = dew;
						}
						humidityArray[getIndex(obsTime)] = humidity;
						if (temp > maxTemp) { maxTemp = temp;	}                      
						if (temp < minTemp) { minTemp = temp;	}
						if (dew > maxDew) { maxDew = dew;	}                      
						if (dew < minDew) { minDew = dew;	}
					}
					var yLegend = "Degrees F";
					var line = "Temperature F";
					var line2 = "Dew Point F";
					if (units == "metric") {
						maxTemp = toCelsius(maxTemp);
						minTemp = toCelsius(minTemp);
						maxDew = toCelsius(maxDew);
						minTemp = toCelsius(minDew);
						yLegend = "Degrees ºC";
						line = "Temperature ºC";
						line2 = "Dew Point ºC";
					}
					
					var so = new SWFObject("http://pwsgadgets.googlecode.com/svn/trunk/open-flash-chart.swf", "ofc", prefs.getString("chart_width"), "225", "9", "#FFFFFF");
					so.addVariable("variables","true");
					so.addVariable("title", "&nbsp;");
					so.addVariable("x_label_style", "10,#000000,0,180,#000000");
					so.addVariable("x_grid_colour","#F0F0F0");
					so.addVariable("x_axis_steps", "60");
					so.addVariable("x_legend","Time,10,#000000");
					so.addVariable("x_labels",fillChartXLabels());
					so.addVariable("y_min",Math.min(Math.floor(minTemp),Math.floor(minDew)) - 1);
					so.addVariable("y_max",Math.max(Math.ceil(maxTemp),Math.ceil(maxDew)) + 1);
					so.addVariable("y_grid_colour","#ADB5C7");
					so.addVariable("y_legend",yLegend + ",10,#000000");
					so.addVariable("y_ticks","5,10,5");
					so.addVariable("line","2,#CD5C5C," + line + ",10");
					so.addVariable("values",tempArray);
					if (prefs.getBool("show_dewpoint")==true) {
						so.addVariable("line_2","1,#98FB98," + line2 + ",10");
						so.addVariable("values_2",dewArray);
						if (prefs.getBool("show_humidity")==true) {
							so.addVariable("y2_min", "0");
							so.addVariable("y2_max", "100");
							so.addVariable("y2_legend", "Relative humidity %25, 10, #000000")
							so.addVariable("y2_lines", "3");
							so.addVariable("show_y2","true");
							so.addVariable("line_3","1,#7B68EE,Relative humidity %25,10");
							so.addVariable("values_3",humidityArray);
						}
					} else {
						if (prefs.getBool("show_humidity")==true) {
							so.addVariable("y2_min", "0");
							so.addVariable("y2_max", "100");
							so.addVariable("y2_legend", "Relative humidity %25, 10, #000000")
							so.addVariable("y2_lines", "2");
							so.addVariable("show_y2","true");
							so.addVariable("line_2","1,#E7D1D3,Relative humidity %25,10");
							so.addVariable("values_2",humidityArray);
						}
					}
					so.addVariable("bg_colour","#FFFFFF");
					so.addVariable("tool_tip","#key#<br>#val# at #x_label#");
					so.write("tempChart_flash");
					_gel("tempChart_LastUpdated").innerHTML = "Last updated at " + getTimeLongString(new Date());
				}
				
				// Create the wind chart.
				function displayWindChart(xml) {
					if (xml == null || typeof(xml) != "object" || xml.firstChild == null) {
					  return;
					}
					var prefs = new _IG_Prefs(__MODULE_ID__);
					var units = prefs.getString("wnd_units");
					var maxGust = -10000;
					var maxPressure = -10000; 
					var minPressure = 10000;     
					var gust = 0;
					var pressure = 0;
					var observationList = xml.getElementsByTagName("current_observation");					
					var gustArray = new Array(1440);
					var pressureArray = new Array(1440);
					// Init gust and pressure point arrays.
					for (var i = 0; i < 1440; i++) {
						gustArray[i] = "null";
						pressureArray[i] = "null";
					}
					var obsTime = new Date();
					for (var i = 0; i < observationList.length ; i++) { 
						gust = parseFloat(observationList[i].getElementsByTagName("wind_gust_mph")[0].firstChild.data);
						pressure = parseFloat(observationList[i].getElementsByTagName("pressure_in")[0].firstChild.data);
						obsTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						if (units == "metric") {
							gustArray[getIndex(obsTime)] = toKmh(gust);
							pressureArray[getIndex(obsTime)] = toMb(pressure);
						} else {
							gustArray[getIndex(obsTime)] = gust;
							pressureArray[getIndex(obsTime)] = pressure;
						}
						if (gust > maxGust) { maxGust = gust;	}
						if (pressure > maxPressure) { maxPressure = pressure;	}                      
						if (pressure < minPressure) { minPressure = pressure;	}
					}
					var yLegend = "Mph";
					var y2Legend = "in";
					var line = "Wind Speed Mph";
					var line2 = "Pressure in";
					if (units == "metric") {
						maxGust = toKmh(maxGust);
						maxPressure = toMb(maxPressure);
						minPressure = toMb(minPressure);
						yLegend = "Km/h";
						y2Legend = "Mb";
						line = "Wind Gust Km/h";
						line2 = "Pressure Mb";
					}
					
					var so = new SWFObject("http://pwsgadgets.googlecode.com/svn/trunk/open-flash-chart.swf", "ofc", prefs.getString("chart_width"), "225", "9", "#FFFFFF");
					so.addVariable("variables","true");
					so.addVariable("title", "&nbsp;");
					so.addVariable("x_label_style", "10,#000000,0,180,#000000");
					so.addVariable("x_grid_colour","#F0F0F0");
					so.addVariable("x_axis_steps", "60");
					so.addVariable("x_legend","Time,10,#000000");
					so.addVariable("x_labels",fillChartXLabels());
					so.addVariable("y_min",0);
					so.addVariable("y_max",Math.ceil(maxGust) + 1);
					so.addVariable("y_grid_colour","#ADB5C7");
					so.addVariable("y_legend",yLegend + ",10,#000000");
					so.addVariable("y_ticks","5,10,5");
					so.addVariable("line","1,#CD5C5C," + line + ",10");
					so.addVariable("values",gustArray);
					if (prefs.getBool("show_pressure")==true) {
						so.addVariable("y2_min", Math.floor(minPressure));
						so.addVariable("y2_max", Math.ceil(maxPressure));
						so.addVariable("y2_legend", y2Legend + ", 10, #000000")
						so.addVariable("y2_lines", "2");
						so.addVariable("show_y2","true");
						so.addVariable("line_2","1,#7B68EE," + line2 + ",10");
						so.addVariable("values_2",pressureArray);
					}
					so.addVariable("bg_colour","#FFFFFF");
					so.addVariable("tool_tip","#key#<br>#val# at #x_label#");
					so.write("windChart_flash");
					_gel("windChart_LastUpdated").innerHTML = "Last updated at " + getTimeLongString(new Date());
				}

				// Create the 'Forecast' tab html.
				function displayForecastHtml(xml) {
					var prefs = new _IG_Prefs(__MODULE_ID__);
					var units = prefs.getString("wnd_units");
					var forecastList = xml.getElementsByTagName("simpleforecast")[0].getElementsByTagName("forecastday");
					for (var i = 0; i < forecastList.length && i < 5; i++) {
						var forecastDate = new Date();
						forecastDate.setDate(parseInt(forecastList[i].getElementsByTagName("day")[0].firstChild.data));
						forecastDate.setMonth((parseInt(forecastList[i].getElementsByTagName("month")[0].firstChild.data))-1);
						forecastDate.setFullYear(parseInt(forecastList[i].getElementsByTagName("year")[0].firstChild.data));
						var today = new Date();
						if (forecastDate.getDate() == today.getDate() && forecastDate.getMonth() == today.getMonth() && forecastDate.getFullYear() == today.getFullYear()) {
							_gel("forecast_Period" + i).innerHTML = "Today";
						} else {
							_gel("forecast_Period" + i).innerHTML = getDayOfWeek(forecastDate.getDay());
						}
						_gel("forecast_Period" + i + "_Icon").innerHTML = "<img src='" + prefs.getString("wnd_icons") + forecastList[i].getElementsByTagName("icon")[0].firstChild.data + ".gif' height='42' width='42'>";
						if (units == "metric") {
							_gel("forecast_Period" + i + "_Max").innerHTML = forecastList[i].getElementsByTagName("high")[0].getElementsByTagName("celsius")[0].firstChild.data + "º";
							_gel("forecast_Period" + i + "_Min").innerHTML = forecastList[i].getElementsByTagName("low")[0].getElementsByTagName("celsius")[0].firstChild.data + "º";
						} else if (units == "english") {
							_gel("forecast_Period" + i + "_Max").innerHTML = forecastList[i].getElementsByTagName("high")[0].getElementsByTagName("fahrenheit")[0].firstChild.data + "F";
							_gel("forecast_Period" + i + "_Min").innerHTML = forecastList[i].getElementsByTagName("low")[0].getElementsByTagName("fahrenheit")[0].firstChild.data + "F";
						} else {
							_gel("forecast_Period" + i + "_Max").innerHTML = forecastList[i].getElementsByTagName("high")[0].getElementsByTagName("fahrenheit")[0].firstChild.data + "F/" + forecastList[i].getElementsByTagName("high")[0].getElementsByTagName("celsius")[0].firstChild.data + "º<br>";
							_gel("forecast_Period" + i + "_Min").innerHTML = forecastList[i].getElementsByTagName("low")[0].getElementsByTagName("fahrenheit")[0].firstChild.data + "F/" + forecastList[i].getElementsByTagName("low")[0].getElementsByTagName("celsius")[0].firstChild.data + "º";
							_gel("forecast_Period" + i + "_Separator").innerHTML = "";
						}
					}					
					_gel("forecast_LastUpdated").innerHTML = "Last updated at " + getTimeLongString(new Date());
				}
				
				function displayAstronomy(xml) {
					if (xml == null || typeof(xml) != "object" || xml.firstChild == null) {
					  return;
					}
					var imgHtml = "";
					var sunriseHour = xml.getElementsByTagName("sunrise")[0].getElementsByTagName("hour")[0].firstChild.data;
					var sunriseMinutes = xml.getElementsByTagName("sunrise")[0].getElementsByTagName("minute")[0].firstChild.data;
					var sunsetHour = xml.getElementsByTagName("sunset")[0].getElementsByTagName("hour")[0].firstChild.data;
					var sunsetMinutes = xml.getElementsByTagName("sunset")[0].getElementsByTagName("minute")[0].firstChild.data;
					var sunrise = new Date();
					sunrise.setHours(sunriseHour);
					sunrise.setMinutes(sunriseMinutes);
					sunrise.setSeconds(0);
					var sunset = new Date();
					sunset.setHours(sunsetHour);
					sunset.setMinutes(sunsetMinutes);
					sunset.setSeconds(0);
					var dayLight = new Date();
					dayLight.setTime(sunset.getTime() - sunrise.getTime());
					
					if (xml.getElementsByTagName("ageOfMoon")[0].firstChild != null) {
						imgHtml += "<img src='http://icons-pe.wxug.com/graphics/moonpictsnew/moon";
						imgHtml += xml.getElementsByTagName("ageOfMoon")[0].firstChild.data;
						imgHtml += ".gif' height='48' width='48'>";
					}
					// Display moon img
					_gel("astronomy_Icon").innerHTML = imgHtml;
					if (xml.getElementsByTagName("percentIlluminated")[0].firstChild != null) {
						_gel("astronomy_Percent").innerHTML = xml.getElementsByTagName("percentIlluminated")[0].firstChild.data + "% of the Moon is Illuminated";
					}
					_gel("astronomy_Sunset").innerHTML = getTimeString(sunset);
					_gel("astronomy_Sunrise").innerHTML = getTimeString(sunrise);
					_gel("astronomy_LightTime").innerHTML = dayLight.getHours() + " hours " + format(dayLight.getMinutes()) + " minutes";
				}
				
				// Create 'Hints' tab html.
				function displayHintsHtml(xml) {
					var existHint = false;
					var html = "<ul>"; 
					// If the station_id is not correct.
					if (xml.getElementsByTagName("station_id")[0].firstChild == null) {
						existHint = true;
						html += "<li><b>Invalid wunderground station id.</b>Please visit <a href='http://www.wunderground.com/weatherstation/index.asp' target='_blank'>Personal Weather Stations Weather Underground</a> site to get more info.</li>";
					} else {
						// Check if weather undergroung has updated info.
						if (xml.getElementsByTagName("observation_time_rfc822")[0].firstChild != null) {
							var observationTime = Date.parse(xml.getElementsByTagName("observation_time_rfc822")[0].firstChild.data);
							var notUpdated = new Date().getTime() - observationTime;
							// If the info is not updated for more than 10 minutes show an alarm.
							if (notUpdated > 600000) {
								existHint = true;
								html += "<li><b>The selected weather station have not sent any information to Weather Underground for more than " + parseInt(((notUpdated/1000)/60)) + " minutes. Please check the station is propertly configured to upload data to Weather Underground.</b></li>";
							}
						}
						// If the neightborhood info is not at wunderground.
						if (xml.getElementsByTagName("neighborhood")[0].firstChild == null) {
							existHint = true;
							html += "<li>If you want to see the selected PWS neighborhood information next to the temperature in the 'Current' tab, please complete Personal Weather Station info at <a href='http://www.wunderground.com/wxstation/signup.html' target='_blank'>Weather Underground</a> web site.</li>";
						}
					}
					if (!existHint) {
						html += "<li>No hints.</li>"
					}
					html += "</ul>";
					// Display HTML string
					_gel(hintsTabId).innerHTML = html;
				}

				// Gets the array index to insert the data in the chart
				function getIndex(obsTime) {
					var today = new Date();
					today.setHours(0);
					today.setMinutes(0);
					return Math.round((obsTime.getTime() - today.getTime())/(60 * 1000));
				}
			
				// Convert farenheit to celsius with one decimal position.
				function toCelsius(f)	{
					return Math.round(((5/9) * (f - 32))*10)/10;
				}

				// Convert mph to km/h with one decimal position.
				function toKmh(mph)	{
					return Math.round((mph * 1.609344)*10)/10;
				}

				// Convert inches of mercury to millibars with one decimal position.
				function toMb(inches)	{
					return Math.round((inches * 33.8637526)*10)/10;
				}
				
				// Convert inches to millilitre with one decimal position.
				function toMm(inches)	{
					return Math.round((inches * 25.4)*10)/10;
				}


				// Outputs the wind direction string from the degrees
				function lookupWindString(n) {
					var s="-";
					if (n > 360) n = n%360;
					if (n >= 0 && n < 11.25 ) s="N";
					else if (n >= 11.25  && n < 33.75 ) s="NNE";
					else if (n >= 33.75  && n < 56.25 ) s="NE";
					else if (n >= 67.5   && n < 78.75 ) s="ENE";
					else if (n >= 78.75  && n < 101.25) s="E";
					else if (n >= 101.25 && n < 123.75) s="ESE";
					else if (n >= 123.75 && n < 146.25) s="SE";
					else if (n >= 146.2  && n < 168.75) s="SSE";
					else if (n >= 168.75 && n < 191.25) s="S";
					else if (n >= 191.25 && n < 213.75) s="SSW";
					else if (n >= 213.75 && n < 236.25) s="SW";
					else if (n >= 236.25 && n < 258.75) s="WSW";
					else if (n >= 258.75 && n < 281.25) s="W";
					else if (n >= 281.25 && n < 303.75) s="WNW";
					else if (n >= 303.75 && n < 326.25) s="NW";
					else if (n >= 326.25 && n < 348.75) s="NNW";
					else if (n >= 348.75) s="N";
					return s;
				}

				// Returns the day of the week.
				function getDayOfWeek(day) {
					var weekday=new Array(7);
					weekday[0]="Sunday";
					weekday[1]="Monday";
					weekday[2]="Tuesday";
					weekday[3]="Wednesday";
					weekday[4]="Thursday";
					weekday[5]="Friday";
					weekday[6]="Saturday";
					return weekday[day];
				}
				
				// Gets the time String from the provided date
				function getTimeString(date) {
					return date.getHours() + ":" + format(date.getMinutes());
				}

				// Gets the time String from the provided date including seconds
				function getTimeLongString(date) {
					return date.getHours() + ":" + format(date.getMinutes()) + ":" + format(date.getSeconds());
				}
				
				// Formats the provided number with two digits.
				function format(n) {
					if (n < 10) return "0" + n;
					else return n;
				}

				// Fills the chart X axis labels with time along the day.
				function fillChartXLabels() {
					var labels = new Array(1440);
					var today = new Date();
					today.setHours(0);
					today.setMinutes(0);
					for (var i = 0; i < 1440 ; i++) {
						labels[i] = format(today.getHours()) + ":" + format(today.getMinutes());
						today.setTime(today.getTime() + 60000);
					}
					return labels;
				}

				// Gets the Weather Underground Current Conditions URL.
				function getCurrentConditionsUrl() {
					return "http://api.wunderground.com/weatherstation/WXCurrentObXML.asp?ID=" + new _IG_Prefs(__MODULE_ID__).getString("wnd_id") + "&rnd=" + Math.random();
				}

				// Gets the Weather Underground Daily Observations URL.
				function getDailyObservationsUrl() {
					return "http://api.wunderground.com/weatherstation/WXDailyHistory.asp?ID=" + new _IG_Prefs(__MODULE_ID__).getString("wnd_id") + "&format=XML&rnd=" + Math.random();
				}
				
				// Gets the Weather Underground forecast URL.
				function getForecastURL(latitude, longitude) {
					return url = "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=" + latitude + "," + longitude;
				}
				
				function displayAboutTab(tabId) {
					var html = "<center><h3>" + version + "</h3></center>";
					html += "<ul>";
					html += "<li>Hokus Gadgets blog including <a href='http://hokusgadgets.blogspot.com' target='_blank'>CurrentConditions.</a></li>";
					html += "<li>CurrentConditions gadget <a href='http://code.google.com/p/pwsgadgets/wiki/CurrentConditions' target='_blank'>home page.</a></li>";
					html += "<li>Feel free to write any feedback to <a href='mailto:pwsgadgets.feedback@gmail.com'>pwsgadgets.feedback@gmail.com</a></li>"
					html += "<li>Get more gadgets for your personal weather station at PWS Gadgets project <a href='http://pwsgadgets.googlecode.com/' target='_blank'>home page</a></li>";
					html += "<li>See the selected Personal Weather Station History at <a href='http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=" + new _IG_Prefs(__MODULE_ID__).getString("wnd_id") + "' target='_blank'>Weather Underground</a>.</li>"
					html += "</ul>";
					_gel(tabId).innerHTML = html;
				}

				_IG_RegisterOnloadHandler(init);
			</script>
		]]> 
	</Content> 
</Module>