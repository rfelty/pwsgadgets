<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="__UP_title__" 
						 	 description="Customizable max min values retrieval from wunderground web site." 
							 author="Jordi Morell"
							 author_email="pwsgadgets.feedback@gmail.com" 
							 author_location="Palma de Mallorca, Spain"
							 thumbnail="http://icons.wunderground.com/graphics/logos/full_4c_gradient.jpg"
							 screenshot="http://icons.wunderground.com/graphics/logos/full_4c_gradient.jpg"
							 title_url="http://pwsgadgets.googlecode.com" 
							 directory_title="Personal Weather Station extreme values." 
							 height="50"
							 singleton="false">
	<Require feature="dynamic-height"/>
</ModulePrefs>
	<UserPref name="wnd_id" display_name="Wunderground station id" required="true"/>
	<UserPref name="wnd_units" datatype="enum" display_name="Units" default_value="metric" required="true">
		<EnumValue value="metric" display_value="Metric" />
		<EnumValue value="english" display_value="English" />
	</UserPref>
	<UserPref name="show_observationtime" display_name="Show observation time?" datatype="bool" default_value="true"/>
	<UserPref name="show_temperature" display_name="Show temperature?" datatype="bool" default_value="true"/>
	<UserPref name="show_dewpoint" display_name="Show dew point?" datatype="bool" default_value="true"/>
	<UserPref name="show_humidity" display_name="Show relative humidity?" datatype="bool" default_value="true"/>
	<UserPref name="show_wind" display_name="Show wind speed?" datatype="bool" default_value="true"/>
	<UserPref name="show_windgust" display_name="Show wind gust?" datatype="bool" default_value="true"/>
	<UserPref name="show_winddegrees" display_name="Show wind degrees?" datatype="bool" default_value="true"/>
	<UserPref name="show_pressure" display_name="Show pressure?" datatype="bool" default_value="true"/>
	<UserPref name="show_1hrain" display_name="Show 1 hour rain?" datatype="bool" default_value="true"/>
	<UserPref name="show_todayrain" display_name="Show today rain?" datatype="bool" default_value="true"/>
	<UserPref name="title" display_name="Title" required="true"/>
	<Content type="html">
		<![CDATA[
			<div id="maxmin__MODULE_ID__" style="font-size:12pt; padding:5px; color: black;">Fetching xml...</div>
			<div id="debug_div" style="font-size:9pt; padding:5px; color: red;"></div>

			<script type="text/javascript">
					// debug flag. When its value is non-zero, debugging messages are displayed
      		var debug = 0;
      		// The string containing debugging messages
      		var debug_html = "";			
				function display() {
				  this.name = 'maxmin__MODULE_ID__';
					var prefs = new _IG_Prefs(__MODULE_ID__);
					var checkValue = prefs.getString("value");
					var url = "http://api.wunderground.com/weatherstation/WXDailyHistory.asp?ID=" + prefs.getString("wnd_id") + "&format=XML&rnd=" + Math.random();
					print(url);
					_IG_FetchXmlContent(url, function (response) {
						if (response == null || typeof(response) != "object" || response.firstChild == null) {
							setContent("<i>Invalid data.</i>");
					  	return;
						}
					var html = ""; 
					var maxTemp = -10000; 
					var minTemp = 10000;     
					var maxTempTime = "";
					var minTempTime = "";
					var data = 0;
					var observationList = response.getElementsByTagName("current_observation");					
					var wunderField = "";
					if (checkValue == "wind_kmh") {
						wunderField = "wind_mph";
					} else if (checkValue == "wind_gust_kmh") {
						wunderField = "wind_gust_mph";
					} else {
						wunderField = checkValue;
					}
					print(wunderField);
					for (var i = 0; i < observationList.length ; i++) { 
						data = parseFloat(observationList[i].getElementsByTagName(wunderField)[0].firstChild.data);
						if (data > maxTemp) {                    
							maxTemp = data;
							maxTempTime = observationList[i].getElementsByTagName("observation_time")[0].firstChild.data;
							maxTempTime = maxTempTime.substr(maxTempime.indexOf(",") + 2, maxTempTime.length);
						}                      
						if (data < minTemp) {  
							minTemp = data;
							minTempTime = observationList[i].getElementsByTagName("observation_time")[0].firstChild.data;
							minTempTime = minTempTime.substr(minTempTime.indexOf(",") + 2, minTempTime.length);
						}
						print(data + " High " + maxTemp + " Low " + minTemp);
					}
					if (prefs.getBool("show_observationtime")==true) {
						html += "High: " + getUnits(checkValue, maxTemp) + " at " + maxTempTime;
						html += "<br>"; 
						html += "Low: " + getUnits(checkValue, minTemp) + " at " + minTempTime;
					} else {
						html += "High: " + getUnits(checkValue, maxTemp);
						html += "<br>"; 
						html += "Low: " + getUnits(checkValue, minTemp);
					}
					// Display HTML string
					setContent(html);
					}, { refreshInterval: (60 * 4)});	
				}
				
				// Outputs content to the div and resizes the gadget
				fucntion setContent(html) {
					_gel(this.name).innerHTML = html;
					_IG_AdjustIFrameHeight();
				}
				
				// Outputs debug messages if debug flag has a non-zero value
				function print(msg) {
					if (debug) {
						debug_html += msg + "<br>";
						// Write debug HTML to div
						_gel("debug_div").innerHTML = debug_html;
						_IG_AdjustIFrameHeight();
					}
				}
				
				// Get the unit of the provided field and the value converted to that unit.
				function getUnits(field, value) {
					if (field == "wind_kmh") {	return (parseFloat(value) * 1.61) + " km/h";	}
					else if (field == "wind_gust_kmh") {	return (parseFloat(value) * 1.61) + " km/h"; }
					else if (field == "temp_c"){ return value + " ºC";}
					else if (field == "temp_f"){ return value + " F";}
					else if (field == "relative_humidity"){ return value + "%";}
					else if (field == "wind_degrees"){ return value + "º";}
					else if (field == "wind_mph"){ return value + " mph";}
					else if (field == "wind_gust_mph"){ return value + " mph";}
					else if (field == "pressure_mb"){ return value + " mb";}
					else if (field == "pressure_in"){ return value + " in";}
					else if (field == "dewpoint_c"){ return value + " ºC";}
					else if (field == "dewpoint_f"){ return value + " F";}
					else if (field == "precip_1hr_metric"){ return value + " mm";}
					else if (field == "precip_1hr_in"){ return value + " in";}
					else if (field == "precip_today_metric"){ return value + " mm";}
					else if (field == "precip_today_in"){ return value + " in";}					
				}
				
				_IG_RegisterOnloadHandler(display);
			</script>
		]]> 
	</Content> 
</Module>