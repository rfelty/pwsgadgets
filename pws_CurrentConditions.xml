<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="__UP_title__" 
							 description="This gadget provides you with your Personal Weather Station updated data from wunderground.com." 
							 author="Jordi Morell"
							 author_email="pwsgadgets.feedback@gmail.com" 
							 author_location="Palma de Mallorca, Spain"
							 thumbnail="http://icons.wunderground.com/graphics/logos/full_4c_gradient.jpg"
							 screenshot="http://icons.wunderground.com/graphics/logos/full_4c_gradient.jpg"
							 title_url="http://pwsgadgets.googlecode.com" 
							 directory_title="Weather underground PWS current conditions." 
							 height="260"
							 scaling="true"
							 singleton="false"
							 scrolling="true">
		<Require feature="analytics"/>
		<Require feature="tabs"/>
	</ModulePrefs>
	<UserPref name="wnd_id" display_name="Wunderground station id" required="true"/>
	<UserPref name="wnd_units" datatype="enum" display_name="Units" default_value="metric" required="true">
		<EnumValue value="metric" display_value="Metric" />
		<EnumValue value="english" display_value="English" />
		<EnumValue value="both" display_value="Both" />
	</UserPref>
	<UserPref name="update_timer" datatype="enum" display_name="Update every: " default_value="30000" required="true">
		<EnumValue value="30000" display_value="30 seconds" />
		<EnumValue value="60000" display_value="1 minute" />
		<EnumValue value="120000" display_value="2 minutes" />
		<EnumValue value="180000" display_value="3 minutes" />
		<EnumValue value="240000" display_value="4 minutes" />
		<EnumValue value="300000" display_value="5 minutes" />
	</UserPref>
	<UserPref name="show_dewpoint" display_name="Dew point:" datatype="bool" default_value="true"/>
	<UserPref name="show_humidity" display_name="Relative humidity:" datatype="bool" default_value="true"/>
	<UserPref name="show_wind" display_name="Wind:" datatype="bool" default_value="true"/>
	<UserPref name="show_pressure" display_name="Pressure:" datatype="bool" default_value="true"/>
	<UserPref name="show_1hrain" display_name="1 hour rain:" datatype="bool" default_value="true"/>
	<UserPref name="show_todayrain" display_name="Today rain:" datatype="bool" default_value="true"/>
	<UserPref name="title" display_name="Title" required="true" default_value="Current conditions"/>
	<Content type="html">
		<![CDATA[
			<div id="current">
				<div id="current_error" style="font-size:10pt; padding:5px; color: black; text-align: left;"></div>
				<center>
					<table>
						<tr>
							<td align="right"><div id="current_icon" style='vertical-align:middle'"></div></td>
							<td align="left"><div id="current_temperature" style="font-weight: bold; padding:5px; color: black; vertical-align:middle"></div></td>
						</tr>
					</table>
				</center>
				<div id="current_dewpoint" style="font-size:10pt; text-align: left;"></div>
				<div id="current_humidity" style="font-size:10pt; text-align: left;"></div>
				<div id="current_wind" style="font-size:10pt; text-align: left;"></div>
				<div id="current_pressure" style="font-size:10pt; text-align: left;"></div>
				<div id="current_1hourrain" style="font-size:10pt; text-align: left;"></div>
				<div id="current_todayrain" style="font-size:10pt; text-align: left;"></div>
				<div id="current_lastupdated" style="font-size:10pt; text-align: left;"></div>
			</div>
			<div id="extreme">
				<table>
					<tr>
						<td align="left" width="24%">&nbsp;</td>
						<td align="left" width="38%"><div style="font-size: small; color:red; font-weight: bold">Max</div></td>
						<td align="left" width="38%"><div style="font-size: small; color:blue; font-weight: bold">Min</div></td>
					</tr>
					<tr>
						<td align="left" width="24%"><div id="extreme_Temp" style="font-size: small; font-weight: bold"></div></td>
						<td align="right" width="38%"><div id="extreme_maxTemp" style="float: left; font-size: small; color:red; font-weight: bold"></div><div id="extreme_maxTempTime" style="float: left; font-size: small"></div></td>
						<td align="right" width="38%"><div id="extreme_minTemp" style="float: left; font-size: small; color:blue; font-weight: bold"></div><div id="extreme_minTempTime" style="float: left; font-size: small"></div></td>
					</tr>
					<tr>
						<td align="left" width="24%"><div id="extreme_DewPoint" style="font-size: small; font-weight: bold"></div></td>
						<td align="right" width="38%"><div id="extreme_maxDewPoint" style="float: left; font-size: small; color:red; font-weight: bold"></div><div id="extreme_maxDewPointTime" style="float: left; font-size: small"></div></td>
						<td align="right" width="38%"><div id="extreme_minDewPoint" style="float: left; font-size: small; color:blue; font-weight: bold"></div><div id="extreme_minDewPointTime" style="float: left; font-size: small"></div></td>
					</tr>
					<tr>
						<td align="left" width="24%"><div id="extreme_Humidity" style="font-size: small; font-weight: bold"></div></td>
						<td align="right" width="38%"><div id="extreme_maxHumidity" style="float: left; font-size: small; color:red; font-weight: bold"></div><div id="extreme_maxHumidityTime" style="float: left; font-size: small"></div></td>
						<td align="right" width="38%"><div id="extreme_minHumidity" style="float: left; font-size: small; color:blue; font-weight: bold"></div><div id="extreme_minHumidityTime" style="float: left; font-size: small"></div></td>
					</tr>
					<tr>
						<td align="left" width="24%"><div id="extreme_Wind" style="font-size: small; font-weight: bold"></div></td>
						<td align="left" width="76%" colspan="2"><div id="extreme_maxWind" style="float: left; font-size: small; color:red; font-weight: bold"></div><div id="extreme_maxWindTime" style="float: left; font-size: small"></div></td>
					<tr>
						<td align="left" width="24%"><div id="extreme_Pressure" style="font-size: small; font-weight: bold"></div></td>
						<td align="right" width="38%"><div id="extreme_maxPressure" style="float: left; font-size: small; color:red; font-weight: bold"></div><div id="extreme_maxPressureTime" style="float: left; font-size: small"></div></td>
						<td align="right" width="38%"><div id="extreme_minPressure" style="float: left; font-size: small; color:blue; font-weight: bold"></div><div id="extreme_minPressureTime" style="float: left; font-size: small"></div></td>
					</tr>
				</table>
				<div id="extreme_lastUpdated"></div>
			</div>
			<div id="hints" style="font-size:9pt; padding:5px; color: gray; text-align: left;"></div>
			<div id="about" style="font-size:10pt; padding:5px; color: gray; text-align: left;"></div>
			<div id="footer" style="font-size:7pt; padding:5px; color: gray; text-align: right;"></div>
			<script type="text/javascript">
			  // version variable
				var version = "v2.2.1";
				// Current conditions tab id
				var currentTabId = "current";
				var currentTabTemperatureId = "current_temperature";
				var currentTabIconId = "current_icon";
				var currentTabOtherId = "current_otherparams";
				// Extreme values tab id
				var extremeTabId = "extreme";
				// Hints tab id
				var hintsTabId = "hints";
				// About tab id
				var aboutTabId = "about";
				// Footer id.
				var footerId = "footer";
				// Initialize tabs.
				var tabs = new _IG_Tabs(__MODULE_ID__, "Current");
				// Track this gadget using Google Analytics specifiying the wunder id used.
				_IG_Analytics("UA-3007781-2", "/CurrentConditions/" + new _IG_Prefs(__MODULE_ID__).getString("wnd_id"));
			
				// Init function.
				function init() {
					// Add the gadget tabs.
					tabs.addTab("Current", currentTabId);
					tabs.addTab("Extreme", extremeTabId);
					tabs.addTab("Hints", hintsTabId);
					tabs.addTab("About", aboutTabId, displayAboutTab);
					_IG_FetchXmlContent(getCurrentConditionsUrl(), processCurrentConditionsResponse);
					_IG_FetchXmlContent(getDailyObservationsUrl(), processDailyObservationsResponse);
				}
				
				function processCurrentConditionsResponse(xml) {
					displayCurrentConditionsHtml(xml);
					displayHintsHtml(xml);
					displayFooterHtml(xml);
					// updateExtremeHtml(xml);
					// Set the timeout
					setTimeout("_IG_FetchXmlContent(getCurrentConditionsUrl(), processCurrentConditionsResponse)", new _IG_Prefs(__MODULE_ID__).getInt("update_timer"));
				}
				
				function processDailyObservationsResponse(xml) {
					displayExtremeHtml(xml);
				}
				
				function processForecastResponse(xml) {
					displayCurrentIconHtml(xml);
				}
				
				function displayFooterHtml(xml) {
					var units = new _IG_Prefs(__MODULE_ID__).getString("wnd_units");
					if (xml.getElementsByTagName("station_id")[0].firstChild != null) {
						if (units == "metric") {
							_gel(footerId).innerHTML = xml.getElementsByTagName("temp_c")[0].firstChild.data + " ºC " + version;
						} else if (units == "english") {
							_gel(footerId).innerHTML = xml.getElementsByTagName("temp_f")[0].firstChild.data + " F " + version;
						} else if (units == "both") {
							_gel(footerId).innerHTML = xml.getElementsByTagName("temp_f")[0].firstChild.data + " F / " + xml.getElementsByTagName("temp_c")[0].firstChild.data + " ºC " + version;
						}
					} else {
							_gel(footerId).innerHTML = version;
					}
				}
				
				// Create 'Current' tab html.
				function displayCurrentConditionsHtml(xml) {
					if (xml == null || typeof(xml) != "object" || xml.firstChild == null) {
						_gel(currentTabId).innerHTML = "<i>Invalid data.</i>";
					  return;
					}
					var prefs = new _IG_Prefs(__MODULE_ID__);
					var units = prefs.getString("wnd_units");
					var temperatureHtml = "";
					// Display metric units.
					if (xml.getElementsByTagName("station_id")[0].firstChild == null) {
						_gel("current_error").innerHTML = "<b>Invalid wunderground station id.</b><br>Please visit <a href='http://www.wunderground.com/weatherstation/index.asp' target='_blank'>Personal Weather Stations Weather Underground</a> site to get more info."
					} else {
						var latitude = xml.getElementsByTagName("latitude")[0].firstChild.data;
						var longitude = xml.getElementsByTagName("longitude")[0].firstChild.data;
						_IG_FetchXmlContent(getForecastURL(latitude, longitude), processForecastResponse);
						if (xml.getElementsByTagName("neighborhood")[0].firstChild != null) {	temperatureHtml += xml.getElementsByTagName("neighborhood")[0].firstChild.data + " "; }
						if (units == "metric") {
							if (xml.getElementsByTagName("temp_c")[0].firstChild != null) {	temperatureHtml += xml.getElementsByTagName("temp_c")[0].firstChild.data + " ºC"; }
							if (xml.getElementsByTagName("dewpoint_c")[0].firstChild != null && prefs.getBool("show_dewpoint")==true) { _gel("current_dewpoint").innerHTML = "Dew point: " + xml.getElementsByTagName("dewpoint_c")[0].firstChild.data + " ºC"; }
							if (xml.getElementsByTagName("relative_humidity")[0].firstChild != null && prefs.getBool("show_humidity")==true) { _gel("current_humidity").innerHTML = "Relative Humidity: " + xml.getElementsByTagName("relative_humidity")[0].firstChild.data + "%"; }
							if (xml.getElementsByTagName("wind_degrees")[0].firstChild != null && xml.getElementsByTagName("wind_mph")[0].firstChild != null && xml.getElementsByTagName("wind_gust_mph")[0].firstChild != null && prefs.getBool("show_wind")==true) { _gel("current_wind").innerHTML = "Wind: " + lookupWindString(xml.getElementsByTagName("wind_degrees")[0].firstChild.data) + " at " + toKmh(parseFloat(xml.getElementsByTagName("wind_mph")[0].firstChild.data)) + " km/h gusting to " + toKmh(parseFloat(xml.getElementsByTagName("wind_gust_mph")[0].firstChild.data)) + " km/h"; }
							if (xml.getElementsByTagName("pressure_mb")[0].firstChild != null && prefs.getBool("show_pressure")==true) { _gel("current_pressure").innerHTML = "Pressure: " + xml.getElementsByTagName("pressure_mb")[0].firstChild.data + " mb"; }
							if (xml.getElementsByTagName("precip_1hr_metric")[0].firstChild != null && prefs.getBool("show_1hrain")==true) { _gel("current_1hourrain").innerHTML =  "1 Hour Rain: " + xml.getElementsByTagName("precip_1hr_metric")[0].firstChild.data + " mm"; }
							if (xml.getElementsByTagName("precip_today_metric")[0].firstChild != null && prefs.getBool("show_todayrain")==true) { _gel("current_todayrain").innerHTML = "Today Rain: " + xml.getElementsByTagName("precip_today_metric")[0].firstChild.data + " mm"; }
						} else if (units == "english") {
							if (xml.getElementsByTagName("temp_f")[0].firstChild != null) { temperatureHtml += xml.getElementsByTagName("temp_f")[0].firstChild.data + " F"; }
							if (xml.getElementsByTagName("dewpoint_f")[0].firstChild != null && prefs.getBool("show_dewpoint")==true) { _gel("current_dewpoint").innerHTML = "Dew point: " + xml.getElementsByTagName("dewpoint_f")[0].firstChild.data + " F"; }
							if (xml.getElementsByTagName("relative_humidity")[0].firstChild != null && prefs.getBool("show_humidity")==true) { _gel("current_humidity").innerHTML = "Relative Humidity: " + xml.getElementsByTagName("relative_humidity")[0].firstChild.data + "%"; }
							if (xml.getElementsByTagName("wind_degrees")[0].firstChild != null && xml.getElementsByTagName("wind_mph")[0].firstChild != null && xml.getElementsByTagName("wind_gust_mph")[0].firstChild != null && prefs.getBool("show_wind")==true) { _gel("current_wind").innerHTML = "Wind: " + lookupWindString(xml.getElementsByTagName("wind_degrees")[0].firstChild.data) + " at " + parseFloat(xml.getElementsByTagName("wind_mph")[0].firstChild.data) + " mph gusting to " + parseFloat(xml.getElementsByTagName("wind_gust_mph")[0].firstChild.data) + " mph"; }
							if (xml.getElementsByTagName("pressure_in")[0].firstChild != null && prefs.getBool("show_pressure")==true) { _gel("current_pressure").innerHTML = "Pressure: " + xml.getElementsByTagName("pressure_in")[0].firstChild.data + " in"; }
							if (xml.getElementsByTagName("precip_1hr_in")[0].firstChild != null && prefs.getBool("show_1hrain")==true) { _gel("current_1hourrain").innerHTML = "1 Hour Rain: " + xml.getElementsByTagName("precip_1hr_in")[0].firstChild.data + " in"; }
							if (xml.getElementsByTagName("precip_today_in")[0].firstChild != null && prefs.getBool("show_todayrain")==true) { _gel("current_todayrain").innerHTML = "Today Rain: " + xml.getElementsByTagName("precip_today_in")[0].firstChild.data + " in"; }
						} else if (units == "both") {
							if (xml.getElementsByTagName("temp_f")[0].firstChild != null && xml.getElementsByTagName("temp_c")[0].firstChild != null) { temperatureHtml += xml.getElementsByTagName("temp_f")[0].firstChild.data + " F / " + xml.getElementsByTagName("temp_c")[0].firstChild.data + " ºC"; }
							if (xml.getElementsByTagName("dewpoint_f")[0].firstChild != null && xml.getElementsByTagName("dewpoint_c")[0].firstChild != null && prefs.getBool("show_dewpoint")==true) { _gel("current_dewpoint").innerHTML = "Dew point: " + xml.getElementsByTagName("dewpoint_f")[0].firstChild.data + " F / " + xml.getElementsByTagName("dewpoint_c")[0].firstChild.data + " ºC"; }
							if (xml.getElementsByTagName("relative_humidity")[0].firstChild != null && prefs.getBool("show_humidity")==true) { _gel("current_humidity").innerHTML = "Relative Humidity: " + xml.getElementsByTagName("relative_humidity")[0].firstChild.data + "%"; }
							if (xml.getElementsByTagName("wind_degrees")[0].firstChild != null && xml.getElementsByTagName("wind_mph")[0].firstChild != null && xml.getElementsByTagName("wind_gust_mph")[0].firstChild != null && prefs.getBool("show_wind")==true) { _gel("current_wind").innerHTML = "Wind: " + lookupWindString(xml.getElementsByTagName("wind_degrees")[0].firstChild.data) + " at " + parseFloat(xml.getElementsByTagName("wind_mph")[0].firstChild.data) + " mph / " + toKmh(parseFloat(xml.getElementsByTagName("wind_mph")[0].firstChild.data)) + " km/h gusting to " + parseFloat(xml.getElementsByTagName("wind_gust_mph")[0].firstChild.data) + " mph / "+ toKmh(parseFloat(xml.getElementsByTagName("wind_gust_mph")[0].firstChild.data)) + " km/h"; }
							if (xml.getElementsByTagName("pressure_in")[0].firstChild != null && xml.getElementsByTagName("pressure_mb")[0].firstChild != null && prefs.getBool("show_pressure")==true) { _gel("current_pressure").innerHTML = "Pressure: " + xml.getElementsByTagName("pressure_in")[0].firstChild.data + " in / " + xml.getElementsByTagName("pressure_mb")[0].firstChild.data + " mb"; }
							if (xml.getElementsByTagName("precip_1hr_in")[0].firstChild != null && xml.getElementsByTagName("precip_1hr_metric")[0].firstChild != null && prefs.getBool("show_1hrain")==true) { _gel("current_1hourrain").innerHTML = "1 Hour Rain: " + xml.getElementsByTagName("precip_1hr_in")[0].firstChild.data + " in / " + xml.getElementsByTagName("precip_1hr_metric")[0].firstChild.data + " mm"; }
							if (xml.getElementsByTagName("precip_today_in")[0].firstChild != null && xml.getElementsByTagName("precip_today_metric")[0].firstChild != null && prefs.getBool("show_todayrain")==true) { _gel("current_todayrain").innerHTML = "Today Rain: " + xml.getElementsByTagName("precip_today_in")[0].firstChild.data + " in / " + xml.getElementsByTagName("precip_today_metric")[0].firstChild.data + " mm"; }
						}
						_gel("current_lastupdated").innerHTML = "Last updated: " + new Date().toLocaleString();
					}
					// Display temperature
					_gel(currentTabTemperatureId).innerHTML = temperatureHtml;
					// Display the footer
					displayFooterHtml(xml);
				}

				// Gets the current conditions icon url.
				function displayCurrentIconHtml(xml) {
					if (xml == null || typeof(xml) != "object" || xml.firstChild == null) {
					  return;
					}
					var imgHtml = "";
					var sunriseHour = xml.getElementsByTagName("sunrise")[0].getElementsByTagName("hour")[0].firstChild.data;
					var sunriseMinutes = xml.getElementsByTagName("sunrise")[0].getElementsByTagName("minute")[0].firstChild.data;
					var sunsetHour = xml.getElementsByTagName("sunset")[0].getElementsByTagName("hour")[0].firstChild.data;
					var sunsetMinutes = xml.getElementsByTagName("sunset")[0].getElementsByTagName("minute")[0].firstChild.data;
					var sunrise = new Date();
					sunrise.setHours(sunriseHour);
					sunrise.setMinutes(sunriseMinutes);
					var sunset = new Date();
					sunset.setHours(sunsetHour);
					sunset.setMinutes(sunsetMinutes);
					var now = new Date();
					if (xml.getElementsByTagName("icon")[0].firstChild != null) {
						imgHtml += "<img src='http://icons.wunderground.com/graphics/conds/"
						if (((sunrise.getTime() - now.getTime()) < 0) && ((sunset.getTime() - now.getTime()) > 0)) {
							imgHtml += xml.getElementsByTagName("icon")[0].firstChild.data;
						} else {
							imgHtml += "nt_" + xml.getElementsByTagName("icon")[0].firstChild.data;
						}
						imgHtml += ".gif' height='42' width='42'>";
					}
					// Display icon
					_gel(currentTabIconId).innerHTML = imgHtml;
				}

				// Create 'Extreme' tab html.
				function displayExtremeHtml(xml) {
					if (xml == null || typeof(xml) != "object" || xml.firstChild == null) {
						_gel(extremeTabId).innerHTML = "<i>Invalid data.</i>";
					  return;
					}
					var prefs = new _IG_Prefs(__MODULE_ID__);
					var units = prefs.getString("wnd_units");
					var maxTempF = -10000;
					var minTempF = 10000;
					var maxTempTime = new Date();
					var minTempTime = new Date();
					var maxDewPointF = -10000;
					var minDewPointF = 10000;
					var maxDewPointTime = new Date();
					var minDewPointTime = new Date();
					var maxHumidity = -10000;
					var minHumidity = 10000;
					var maxHumidityTime = new Date();
					var minHumidityTime = new Date();
					var maxPressureIn = -10000;
					var minPressureIn = 10000;
					var maxPressureTime = new Date();
					var minPressureTime = new Date();
					var maxWindMph = -10000;
					var maxWindTime = new Date();
					var currentTemp = 0;
					var currentDewPoint = 0;
					var currentHumidity = 0;
					var currentPressure = 0;
					var currentWind = 0;
					var observationList = xml.getElementsByTagName("current_observation");					
					for (var i = 0; i < observationList.length ; i++) { 
						currentTemp = parseFloat(observationList[i].getElementsByTagName("temp_f")[0].firstChild.data);
						currentDewPoint = parseFloat(observationList[i].getElementsByTagName("dewpoint_f")[0].firstChild.data);
						currentHumidity = parseFloat(observationList[i].getElementsByTagName("relative_humidity")[0].firstChild.data);
						currentPressure = parseFloat(observationList[i].getElementsByTagName("pressure_in")[0].firstChild.data);
						currentWind = parseFloat(observationList[i].getElementsByTagName("wind_gust_mph")[0].firstChild.data);
						if (currentTemp > maxTempF) {                    
							maxTempF = currentTemp;
							maxTempTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}                      
						if (currentTemp < minTempF) {  
							minTempF = currentTemp;
							minTempTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}
						if (currentDewPoint > maxDewPointF) {                    
							maxDewPointF = currentDewPoint;
							maxDewPointTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}                      
						if (currentDewPoint < minDewPointF) {  
							minDewPointF = currentDewPoint;
							minDewPointTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}
						if (currentHumidity > maxHumidity) {                    
							maxHumidity = currentHumidity;
							maxHumidityTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}                      
						if (currentHumidity < minHumidity) {  
							minHumidity = currentHumidity;
							minHumidityTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}
						if (currentPressure > maxPressureIn) {                    
							maxPressureIn = currentPressure;
							maxPressureTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}                      
						if (currentPressure < minPressureIn) {  
							minPressureIn = currentPressure;
							minPressureTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}
						if (currentWind > maxWindMph) {                    
							maxWindMph = currentWind;
							maxWindTime.setTime(Date.parse(observationList[i].getElementsByTagName("observation_time_rfc822")[0].firstChild.data));
						}                      
					}
					_gel("extreme_Temp").innerHTML = "Temperature";
					_gel("extreme_maxTempTime").innerHTML = "&nbsp;at " + maxTempTime.getHours() + ":" + getMin(maxTempTime.getMinutes());
					_gel("extreme_minTempTime").innerHTML = "&nbsp;at " + minTempTime.getHours() + ":" + getMin(minTempTime.getMinutes());
					
					if (prefs.getBool("show_humidity")==true) {
						_gel("extreme_Humidity").innerHTML = "Humidity";
						_gel("extreme_maxHumidity").innerHTML = maxHumidity + "%";
						_gel("extreme_maxHumidityTime").innerHTML = "&nbsp;at " + maxHumidityTime.getHours() + ":" + getMin(maxHumidityTime.getMinutes());
						_gel("extreme_minHumidity").innerHTML = minHumidity + "%";
						_gel("extreme_minHumidityTime").innerHTML = "&nbsp;at " + minHumidityTime.getHours() + ":" + getMin(minHumidityTime.getMinutes());
					}
					if (units == "metric") {
						_gel("extreme_maxTemp").innerHTML = toCelsius(parseFloat(maxTempF)) + " ºC";
						_gel("extreme_minTemp").innerHTML =  toCelsius(parseFloat(minTempF)) + " ºC";
						if (prefs.getBool("show_dewpoint")==true) {
							_gel("extreme_DewPoint").innerHTML = "Dew point";
							_gel("extreme_maxDewPoint").innerHTML = toCelsius(parseFloat(maxDewPointF)) + " ºC";
							_gel("extreme_maxDewPointTime").innerHTML = "&nbsp;at " + maxDewPointTime.getHours() + ":" + getMin(maxDewPointTime.getMinutes());
							_gel("extreme_minDewPoint").innerHTML = toCelsius(parseFloat(minDewPointF)) + " ºC"
							_gel("extreme_minDewPointTime").innerHTML = "&nbsp;at " + minDewPointTime.getHours() + ":" + getMin(minDewPointTime.getMinutes());
						}
						if (prefs.getBool("show_wind")==true) {
							_gel("extreme_Wind").innerHTML = "Wind gust";
							_gel("extreme_maxWind").innerHTML = toKmh(parseFloat(maxWindMph)) + " km/h";
							_gel("extreme_maxWindTime").innerHTML = "&nbsp;at " + maxWindTime.getHours() + ":" + getMin(maxWindTime.getMinutes());
						}
						if (prefs.getBool("show_pressure")==true) {
							_gel("extreme_Pressure").innerHTML = "Pressure";
							_gel("extreme_maxPressure").innerHTML = toMb(parseFloat(maxPressureIn)) + " mb";
							_gel("extreme_maxPressureTime").innerHTML = "&nbsp;at " + maxPressureTime.getHours() + ":" + getMin(maxPressureTime.getMinutes());
							_gel("extreme_minPressure").innerHTML = toMb(parseFloat(minPressureIn)) + " mb";
							_gel("extreme_minPressureTime").innerHTML = "&nbsp;at " + minPressureTime.getHours() + ":" + getMin(minPressureTime.getMinutes());
						}
					} else if (units == "english") {
						_gel("extreme_maxTemp").innerHTML = maxTempF + " F";
						_gel("extreme_minTemp").innerHTML =  minTempF + " F";
						if (prefs.getBool("show_dewpoint")==true) {
							_gel("extreme_DewPoint").innerHTML = "Dew point";
							_gel("extreme_maxDewPoint").innerHTML = maxDewPointF+ " F";
							_gel("extreme_maxDewPointTime").innerHTML = "&nbsp;at " + maxDewPointTime.getHours() + ":" + getMin(maxDewPointTime.getMinutes());
							_gel("extreme_minDewPoint").innerHTML = minDewPointF + " F"
							_gel("extreme_minDewPointTime").innerHTML = "&nbsp;at " + minDewPointTime.getHours() + ":" + getMin(minDewPointTime.getMinutes());
						}
						if (prefs.getBool("show_wind")==true) {
							_gel("extreme_Wind").innerHTML = "Wind gust";
							_gel("extreme_maxWind").innerHTML = maxWindMph + " mph";
							_gel("extreme_maxWindTime").innerHTML = "&nbsp;at " + maxWindTime.getHours() + ":" + getMin(maxWindTime.getMinutes());
						}
						if (prefs.getBool("show_pressure")==true) {
							_gel("extreme_Pressure").innerHTML = "Pressure";
							_gel("extreme_maxPressure").innerHTML = maxPressureIn + " in";
							_gel("extreme_maxPressureTime").innerHTML = "&nbsp;at " + maxPressureTime.getHours() + ":" + getMin(maxPressureTime.getMinutes());
							_gel("extreme_minPressure").innerHTML = minPressureIn + " in";
							_gel("extreme_minPressureTime").innerHTML = "&nbsp;at " + minPressureTime.getHours() + ":" + getMin(minPressureTime.getMinutes());
						}
					} else if (units == "both") {
						_gel("extreme_maxTemp").innerHTML = maxTempF + " F / " + toCelsius(parseFloat(maxTempF)) + " ºC";
						_gel("extreme_minTemp").innerHTML =  minTempF + " F / " + toCelsius(parseFloat(minTempF)) + " ºC";
						if (prefs.getBool("show_dewpoint")==true) {
							_gel("extreme_DewPoint").innerHTML = "Dew point";
							_gel("extreme_maxDewPoint").innerHTML = maxDewPointF + " F / " + toCelsius(parseFloat(maxDewPointF)) + " ºC";
							_gel("extreme_maxDewPointTime").innerHTML = "&nbsp;at " + maxDewPointTime.getHours() + ":" + getMin(maxDewPointTime.getMinutes());
							_gel("extreme_minDewPoint").innerHTML = minDewPointF + " F / " + toCelsius(parseFloat(minDewPointF)) + " ºC";
							_gel("extreme_minDewPointTime").innerHTML = "&nbsp;at " + minDewPointTime.getHours() + ":" + getMin(minDewPointTime.getMinutes());
						}
						if (prefs.getBool("show_wind")==true) {
							_gel("extreme_Wind").innerHTML = "Wind gust";
							_gel("extreme_maxWind").innerHTML = maxWindMph + " mph / " + toKmh(parseFloat(maxWindMph)) + " km/h";
							_gel("extreme_maxWindTime").innerHTML = "&nbsp;at " + maxWindTime.getHours() + ":" + getMin(maxWindTime.getMinutes());
						}
						if (prefs.getBool("show_pressure")==true) {
							_gel("extreme_Pressure").innerHTML = "Pressure";
							_gel("extreme_maxPressure").innerHTML = maxPressureIn + " in / " + toMb(parseFloat(maxPressureIn)) + " mb";
							_gel("extreme_maxPressureTime").innerHTML = "&nbsp;at " + maxPressureTime.getHours() + ":" + getMin(maxPressureTime.getMinutes());
							_gel("extreme_minPressure").innerHTML = minPressureIn + " in / " + toMb(parseFloat(minPressureIn)) + " mb";
							_gel("extreme_minPressureTime").innerHTML = "&nbsp;at " + minPressureTime.getHours() + ":" + getMin(minPressureTime.getMinutes());
						}
					}
				}
				
				// Create 'Hints' tab html.
				function displayHintsHtml(xml) {
					var html = "<ul>"; 
					// If the station_id is not correct.
					if (xml.getElementsByTagName("station_id")[0].firstChild == null) {
						html += "<li><b>Invalid wunderground station id.</b>Please visit <a href='http://www.wunderground.com/weatherstation/index.asp' target='_blank'>Personal Weather Stations Weather Underground</a> site to get more info.</li>";
					} else {
						// Check if weather undergroung has updated info.
						if (xml.getElementsByTagName("observation_time_rfc822")[0].firstChild != null) {
							var observationTime = Date.parse(xml.getElementsByTagName("observation_time_rfc822")[0].firstChild.data);
							var notUpdated = new Date().getTime() - observationTime;
							// If the info is not updated for more than 10 minutes show an alarm.
							if (notUpdated > 600000) { html += "<li><b>Your personal weather station have not sent any information to Weather Underground for more than " + parseInt(((notUpdated/1000)/60)) + " minutes. Please check your station is propertly configured to upload data to Weather Underground.</b></li>"; }
						}
						// If the neightborhood info is not at wunderground.
						if (xml.getElementsByTagName("neighborhood")[0].firstChild == null) {	html += "<li>If you want to see your neighborhood information next to the temperature in the 'Current' tab, please complete your Personal Weather Station info at <a href='http://www.wunderground.com/wxstation/signup.html' target='_blank'>Weather Underground</a> web site.</li>"; }
					}
					html += "<li>Get CurrentConditions gadget updated information at <a href='http://code.google.com/p/pwsgadgets/wiki/CurrentConditions' target='_blank'>CurrentConditions gadget page</a>.</li>";
					html += "<li>Get more gadgets for your personal weather station at PWS Gadgets project <a href='http://pwsgadgets.googlecode.com/' target='_blank'>home page</a></li>";
					html += "<li>See your Personal Weather Station History at <a href='http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=IISLASBA11' target='_blank'>Weather Underground</a>.</li>"
					html += "</ul>";
					// Display HTML string
					_gel(hintsTabId).innerHTML = html;
				}
				
				// Adds a leading 0 to the provided minutes when needed.
				function getMin(minutes) {
					var minute = "";
					if (minutes < 10) {
						minute = "0" + minutes;
					} else {
						minute = minutes;
					}
					return minute;
				}

				// Convert farenheit to celsius with one decimal number.
				function toCelsius(f)	{
					return Math.round(((5/9) * (f - 32))*10)/10;
				}

				// Convert mph to km/h with one decimal number.
				function toKmh(mph)	{
					return Math.round((mph * 1.609344)*10)/10;
				}

				// Convert inches of mercury to millibars.
				function toMb(inches)	{
					return Math.round(inches * 33.8637526);
				}

				// Outputs the wind direction string from the degrees
				function lookupWindString(n) {
					var s="-";
					if (n > 360) n = n%360;
					if (n >= 0 && n < 11.25 ) s="N";
					else if (n >= 11.25  && n < 33.75 ) s="NNE";
					else if (n >= 33.75  && n < 56.25 ) s="NE";
					else if (n >= 67.5   && n < 78.75 ) s="ENE";
					else if (n >= 78.75  && n < 101.25) s="E";
					else if (n >= 101.25 && n < 123.75) s="ESE";
					else if (n >= 123.75 && n < 146.25) s="SE";
					else if (n >= 146.2  && n < 168.75) s="SSE";
					else if (n >= 168.75 && n < 191.25) s="S";
					else if (n >= 191.25 && n < 213.75) s="SSW";
					else if (n >= 213.75 && n < 236.25) s="SW";
					else if (n >= 236.25 && n < 258.75) s="WSW";
					else if (n >= 258.75 && n < 281.25) s="W";
					else if (n >= 281.25 && n < 303.75) s="WNW";
					else if (n >= 303.75 && n < 326.25) s="NW";
					else if (n >= 326.25 && n < 348.75) s="NNW";
					else if (n >= 348.75) s="N";
					return s;
				}

				// Gets the Weather Underground Current Conditions URL.
				function getCurrentConditionsUrl() {
					return "http://api.wunderground.com/weatherstation/WXCurrentObXML.asp?ID=" + new _IG_Prefs(__MODULE_ID__).getString("wnd_id") + "&rnd=" + Math.random();
				}

				// Gets the Weather Underground Daily Observations URL.
				function getDailyObservationsUrl() {
					return "http://api.wunderground.com/weatherstation/WXDailyHistory.asp?ID=" + new _IG_Prefs(__MODULE_ID__).getString("wnd_id") + "&format=XML&rnd=" + Math.random();
				}
				
				// Gets the Weather Underground forecast URL.
				function getForecastURL(latitude, longitude) {
					return url = "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=" + latitude + "," + longitude;
				}
				
				function displayAboutTab(tabId) {
					var html = "<center><h3>" + version + "</h3></center>";
					html += "<ul>";
					html += "<li>CurrentConditions gadget <a href='http://code.google.com/p/pwsgadgets/wiki/CurrentConditions' target='_blank'>home page.</a></li>";
					html += "<li>Feel free to write any feedback to <a href='mailto:pwsgadgets.feedback@gmail.com'>pwsgadgets.feedback@gmail.com</a></li>"
					html += "</ul>";
					_gel(tabId).innerHTML = html;
				}

				_IG_RegisterOnloadHandler(init);
			</script>
		]]> 
	</Content> 
</Module>